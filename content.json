{"meta":{"title":"前端小窝-->小白之家","subtitle":"Do what u love,  love what u do .","description":"贺兆祥","author":"He Zhaoxiang","url":"https://hezhaoxiang.work","root":"/"},"pages":[{"title":"about","date":"2019-12-08T11:50:30.000Z","updated":"2019-12-10T11:06:04.000Z","comments":true,"path":"about/inde2x.html","permalink":"https://hezhaoxiang.work/about/inde2x.html","excerpt":"","text":"Welcome to 404的 blog~"},{"title":"about","date":"2019-12-08T11:50:30.000Z","updated":"2019-12-10T11:06:04.000Z","comments":true,"path":"about/index.html","permalink":"https://hezhaoxiang.work/about/index.html","excerpt":"","text":"Welcome to 404的 blog~"},{"title":"留下你的故事","date":"2020-02-13T00:26:38.930Z","updated":"2019-12-09T13:40:36.000Z","comments":true,"path":"board/index.html","permalink":"https://hezhaoxiang.work/board/index.html","excerpt":"","text":"啤酒，花生米准备好了，你的故事呢？"}],"posts":[{"title":"美团实习总结--汇总","slug":"实习总结陈述","date":"2020-08-25T13:41:00.000Z","updated":"2020-09-07T19:05:43.216Z","comments":true,"path":"2020/all/","link":"","permalink":"https://hezhaoxiang.work/2020/all/","excerpt":"","text":"实习总结陈述 一、个人信息 姓名 贺 实习时间 2020.06.01 - 2020.08.20 部门 交通事业部-终端研发中心 岗位 前端开发工程师 二、工作成果 1. 个人职责目前主要参与“薪火”–MBL相关的前端开发和版本迭代，具体为以下几个方面： 使用element-ui、Echarts组件开发和迭代活动录入和策略看板的相关需求； 通过git进行分支管理和代码提交； 在cargo、plus环境发布dev、st环境并进行上线部署； 2. 项目相关【项目名称】“薪火”数据平台–MBL主题 背景 MBL主题是对多个打车平台的价格信息进行整理，并对其中原价、补贴和策略等信息进行对比分析； 以上信息需要人工录入，并将这些信息充分价值化，以图表和日历的形式展现； 活动策略提供了手动录入的页面，策略看板将价格等信息展示出来。 用户 对MBL的整体诉求 老板 整体价格竞争力、定价和补贴竞争力 BA业务需求分析师 - 核心商是否调价、调价后的影响 补贴层：竞对补贴构成及变化 || 乘客运营 | - 对外监控：竞对是否调价、调价前后竞争力是否有变化 营销层：竞对补贴变化趋势、活动玩法和内容 | 目标对于活动录入 营销录入：添加非结构化的活动信息，支持一次性批量录入活动的功能； 对于乘客策略看板 量化原价竞争力：原价以折线图形式展示，分服务商和运输距离作对比； 量化补贴竞争力：对补贴率作占比和时间趋势比较，直观展示补贴情况， 统计活动策略：按活动类型以日历表形式展示各类活动的详情，全局展示营销活动情况；) ) 技术实现1、技术方案 活动录入流程图 原价和补贴图表流程图 策略日历流程图 2、技术难点 难点 解决方法 1、二级监听 2、图片回显与删除 原因： urls的索引index 为null，无法定位到哪个活动解决： 在调用增加和删除方法前，先获取index，根据第几个活动，来删除图片;获取index：click –&gt;mouseover; 3、图表数据处理与列合并 所遇问题 对业务不熟悉，任务涉及的组件及其中变量的含义不了解； 对开发过程中的常用工具和git操作不熟悉； 前端功能开发过程中思路不开阔，对部分难点需求没有明确的实现思路和合理的解决方案； 1，2个实际问题 解决方式 根据url路径判断各组件的作用，学习代码时加注释； 导师耐心讲解演示，自己总结使用方式并做笔记，在开发过程中一点点学习； 对于难点需求，多查阅资料，参考项目中类似功能的实现方式，和导师沟通确定解决方案；功能实现过程中多查阅开发文档并合理的复用组件； 结果与意义活动策略录入方面 由单个活动录入变为一次性多城市、多个活动录入；提高了运营的手动录入效率； 策略看板方面 以折线图、柱状图和日历的形式代替表格信息，更直观清晰的展示价格信息并作相关对比，全局展示活动情况； 业务价值： 定价层面实现分城市、分服务商和滴滴快车的价格比对，方便估算原价竞争力； 实现乘客动态策略和70%以上常规营销活动的信息采集结构化，目前此两类信息已经开始针对重点运营12城进行采集； 动态策略支持分运距补贴率趋势分析； 立减、套餐、充返活动等可实现日期对比，方便分析竞对活动的趋势变化； 学习 加深了对前端工程化的理解，熟悉了项目开发的整个流程，包括前端页面开发、git推送、接口调试和上线部署等； 对组件复用、阅读API手册更加重视，对element组件和Echarts组件更加熟悉，提高了参考文档进行开发的动手能力； 学习了解决问题的思路，包括分析问题原因，通过console控制台排查问题，最后解决问题。3. 总结梳理1、开发流程和git代码管理 https://km.sankuai.com/page/4052923502、活动录入总结和策略看板总结 https://km.sankuai.com/page/3768554683、table日历合并 https://km.sankuai.com/page/405300642 三、成长与收获在这两个月的实习期间，我参与了每周的周会、需求评审和前端开发等环节，熟悉并使用了thrift、cargo、plus等开发和部署工具，听取了小组内的交流分享，和导师的定期交流指导也让我对自己有一个更清晰的认识，因此这段时间的收获我总结为以下几个方面： （1）在业务方面 通过参与周会和组内分享，我对部门的业务有一个整体的认识，对自己负责的MBL主题有整体的认识和业务逻辑思路，根据功能需求能找到相应的实现思路和方案； MBL业务集中在定价、活动策略以及动态策略等信息的采集、展示和分析，采集包括手动录入、上传excel批量导入等多种录入方式，展示信息主要以列表和表格形式为主，分析主要针对价格和各种活动策略数据，以图表和日历等形式分维度进行展示对比，比较得出各自特点和优势； （2）在技术方面 熟悉了从接口定义、前端开发、自测调试接口和数据、git代码推送以及发dev和st测试环境到上线发布的整个流程，加深了对git操作的理解； 通过使用element组件和Echarts组件进行项目开发，对组件化封装和使用有了更深的认识，提高了自己查阅API文档进行开发的能力； 对数据格式处理更加熟练，主要表现为对接口数据的格式转换，如对象与数组之间数据的转换、空数据补足、对象数据处理等； （3）在个人思考方面 优势 不足 - 分析问题、解决问题的思路有所提升。在自测过程中出现问题，通过查看输出结果、查阅API文档等方式定位问题的原因，分析找出相应的解决方案，逐步提高了自己分析问题、解决bug的能力； | - 知识体系不完善，基础知识还需继续补充。部门的业务中包含火龙果和观星台等，自己对于复杂业务和移动端的开发经验欠缺，这方面的相关知识也应在以后补充； || - 善于总结归纳。及时总结经验和遇到的问题，梳理技术方案、解决问题的方法和一些开发工具的使用，以文档形式产出，在下次的开发中避免相同的问题消耗时间； | - 对疑难问题的解决思路不够开阔，不易定位到问题的根本原因，需要多次尝试来解决问题。在实现table日历时，滚动条会部分遮挡最左一列的内容，多方尝试后发现是浏览器缩放的原因； || - 熟悉开发流程，能完成大部分功能开发。对MBL业务中涉及的需求能给出相应的技术方案，对于部分难点问题能找到相关的技术和实现思路； | | 四、未来规划 （1）近期规划业务方面： MBL后续业务也将围绕现有活动策略、定价策略等内容展开，包括OCR识别录入，新增对比分析等，主要实现思路是使用element组件或Echarts组件进行录入和相关内容展示分析； 在后续参与需求评审时，尽可能给出详细技术方案和排期，留好buffer时间，保证开发如期进行； 技术方面： 对MBL中v2.2开发中的问题和知识进行总结，夯实基础知识，加强对数据处理熟练程度； 合理划分时间，在周末补充ES6、webpack等前端知识，完善知识体系，尽可能提前覆盖以后的业务需求； （2）长期规划前端能力模型 业务–技术方案体系：1-2年，持续性学习，不断给自己充电，衡量标准，在实现功能需求后及时总结，熟悉业务需求，形成自己的业务–技术方案体系，薪火，火龙果，移动端（观星台），湾流，可视化，css、 vue，node 提高效率，保证效果：通过前端开发经验的积累，在以后的前端开发中能更加熟练的实现需求，减少查API手册和踩坑消耗的时间； 承担需求，独当一面：3-5年，熟悉前端各项业务和技术方案，独立完成业务需求中的前端开发工作，解决业务中的关键问题，实现产品到价值的转换。 职业素养提升 1、与后端和PM的沟通能力，日常汇报工作的表达能力；2、巩固完善技术栈，提高前端开发能力；3、划分工作时间，确定工作优先级，保证工作有序进行。","categories":[{"name":"美团实习","slug":"美团实习","permalink":"https://hezhaoxiang.work/categories/%E7%BE%8E%E5%9B%A2%E5%AE%9E%E4%B9%A0/"},{"name":"工作总结","slug":"美团实习/工作总结","permalink":"https://hezhaoxiang.work/categories/%E7%BE%8E%E5%9B%A2%E5%AE%9E%E4%B9%A0/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"实习","slug":"实习","permalink":"https://hezhaoxiang.work/tags/%E5%AE%9E%E4%B9%A0/"}],"author":"He Zhaoxiang"},{"title":"美团实习总结二--活动录入总结","slug":"实习总结23","date":"2020-08-10T14:02:00.000Z","updated":"2020-09-07T18:38:51.357Z","comments":true,"path":"2020/about-table/","link":"","permalink":"https://hezhaoxiang.work/2020/about-table/","excerpt":"","text":"活动策略录入总结整体思路 （一）功能实现 1、excel读取（学习）const fileConcent = e.target.file[0]; //fileContent 为文件信息const reader = new FileReader(); //读取文件方法reader.readAsBinaryString(fileContent);//执行该方法时，自动触发onload，read结果放在wordbook中,workbook包含excel所有信息，如下图；把上图结果workbook转为json（sheet.to_json方法） 2、上传提示框 el-dialog 3、批量删除 4、数据校验 折扣输入框：一位数字–&gt;num*10; 输入长度maxlength&lt;=2; el-input输入框属性 :rules=”[{type:array, required, message: “不可为空”}]” 提交时判断数字数字是否为空，为空则this.$message.error(‘’); 5、新建情况下“其他活动”变化：单个活动变为-&gt;多个活动录入，upload：上传图片第一个其他活动使用原来的城市日期等其他活动，活动参数由对象变为对象数组，难点 添加日期、规则、上传图片等组件需要条件：判断type = 其他 使用新数组（对象–&gt;对象数组）保存信息，各个属性值与原来参数同，以v-for形式展示多个活动； 上传功能：el-upload组件，包含预览、保存url、多个图片、放大和删除 新增活动：日期城市名称等信息push进新数组，列表活动增加一个； 提交处理：数组遍历，每次提交一个对象信息，其中需要拆分城市id数组； 查看和编辑状态–&gt;点击进入详情 watch监听：如果为“其他”活动, 对象参数 -&gt;另一个对象数组中； 查看：限制不可用重新编辑：信息修改或增加活动 再次提交时，根据活动id（后端产生，更新则有id，新增无id）区分为“更新”和“新增”，分开提交 图片回显，fileList将url以对象形式存储，能够在upload中展示； 6、活动录入流程图 7、合并日历展示–table 难点数据格式处理：按天数据（按列给数据）–&gt;按活动类型展示（分5行展示）；一个活动类型–&gt;多个活动（求最大行数）; 每一行活动内容相同tableContent处理–5层循环：第一层5个活动类型；每个类型最大行数，行数for循环，每一行活动；每一行每一个日期：每一行不同日期的对比；不同日期中一天的多个活动依次对比，相同则放入同一行，不同则进入下一行；行合并：行列合并通过span-method实现，在第一列合并；maxlength为合并的行数；列合并：难点在于多次合并列和合并位置不确定；) 8、数据处理思路 （二）所遇问题及解决 难点 原因及解决 1、合并后省略号一直显示的问题 原因：不能限制字符长度，限制会所以都省略；解决：使用弹性盒子，只有内容过多时，才使用ellipsis省略号display: -webkit-box; /作为弹性伸缩盒子模型显示/-webkit-line-clamp: 1; /显示的行数；如果要设置2行加…则设置为2/overflow: hidden; /超出的文本隐藏/text-overflow: ellipsis; /* 溢出用省略号/-webkit-box-orient: vertical; /*伸缩盒子的子元素排列：从上到下/ 2、删除图片时urls不存在 原因： urls的索引index 为null，无法定位到哪个活动解决： 在调用增加和删除方法前，先获取index，根据第几个活动，来删除图片;获取index：click –&gt;mouseover; 3、第一次可以正常显示在最右侧，第二次位置不对，使用nexttick不起效果 原因：第二次渲染滚动条位置，页面没渲染完，导致位置不对解决： 使用setTimeOut","categories":[{"name":"美团实习","slug":"美团实习","permalink":"https://hezhaoxiang.work/categories/%E7%BE%8E%E5%9B%A2%E5%AE%9E%E4%B9%A0/"},{"name":"工作总结","slug":"美团实习/工作总结","permalink":"https://hezhaoxiang.work/categories/%E7%BE%8E%E5%9B%A2%E5%AE%9E%E4%B9%A0/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"实习","slug":"实习","permalink":"https://hezhaoxiang.work/tags/%E5%AE%9E%E4%B9%A0/"}],"author":"He Zhaoxiang"},{"title":"美团实习总结一--Echarts看板总结","slug":"实习总结一一一","date":"2020-06-30T14:36:00.000Z","updated":"2020-09-07T19:03:28.497Z","comments":true,"path":"2020/doform01/","link":"","permalink":"https://hezhaoxiang.work/2020/doform01/","excerpt":"","text":"策略看板总结 （一）基础 js的native和prevent .native: 原生js的绑定系统事件，vue中绑定按键事件 @keyup.enter.native .prevent: @submit.native.prevent 阻止默认提交 空对象补足，补充key：null，先拿到allkeys，key数组，在空对象中添加key和value 数据格式转换，infoMap 对象数组中，相同key的值进行合并。 async await 异步执行，先执行async中的部分，await部分异步（请求到结果再返回） 请求方法request 样式布局 display：block，按组件划分，高度别写死，多使用margin-top，margin-bottom json处理 JSON.stringify(myJson); json转为对象格式； JSON.parse(myObj); 对象转为json格式； # （二）vue知识 vuex使用 store：在main.js中引用store.js，加入到根vue中; state成员函数（变量）定义； mutation相当于method，使用处 this.$store.commit(‘函数名’，’变量‘)进行保存； action：处理异步，可以封装commitmethod1Action 。。。 commit(); 优点是mutation是同步操作，不能进行其中的变量追踪，action默认为一个primise，执行异步； module：多个store划分管理； watch钩子使用–三种 变量名：直接加方法名 city： ’fun1‘；city变化时才执行fun1; immediate： true 立即执行handler方法 deep: true 监听对象的变化 nextick原理和使用 this.$nextick(()=&gt; {}) （异步） vue.nextick 是获取到Dom对象进行操作，一般用于从后台获取数据后，进行DOM更新（如项目中用于更新echart渲染的图表） this.nextick则绑定到了当前环境下的DOM实例 使用：在mounted或method中执行，更新DOM，若用于created，在DOM渲染完之后，才能获取DOM值 （三）element组件 1、el-input :maxlength=”2” 限制输入的最大长度为2（两个数字）注意：el-input-number 对maxlength属性无效(该组件有max,min) 或者用原生js方法 校验：@blur=“method1” 输入框失去焦点时执行method1 ，报错：this.$message.error(‘数据格式错误’)；（el组件） 2、el-button plain：空心形式, size=”mini” type=”primary” @click=”method2” 绑定事件 3、el-select el-optionel-select v-model=”selected” 绑定选中的值 filterable 支持输入搜索 :plaecholder=”请选择” @change=”chooseMethod” 事件绑定在el-select上 el-option &lt; v-for=”item in options” :key=”item.value” :label=”item.label” :value=”item.value” &gt; {label:’选项一’， value: ‘1’ } label是显示的选项，key以value来确定每一个唯一 4、el-date-picker type=”date”,datetime, daterange 时间选择分别为“某天，某天具体到分，日期范围” v-model=”toDate” toDate是日期数组，使用时须转为20200701格式 range-separator=”-“ start-placeholder=”开始日期” end-placeholder=”结束日期”&gt; 5、el-radio 注：radiosList是一个对象数组，oneRadio是一个数字或字符，绑定的是 :label 的内容 按钮形式： 选项一x 6、el-form el-form表单绑定form所有的数据，可放置多个控件 input，select等, 7、el-card 卡片式展示,可实现阴影效果； 8、el-upload action=”https://jsonplaceholder.typicode.com/posts/&quot; 上传位置，post方式 :limit=”3” 数量限制 on-success=”m1” on-remove=”m2” on-preview=”m3” 图片放大预览 ，m3里 得到imgUrl list-type=”picture-card/picture”展示类型：卡片或直接图片 9、el-table 用法与原理： table按行展示数据，多行展示可以在tableData中n个对象–&gt;n行或: 数组v-for形式，每个el-table-column的prop与tableData中对应，如0303，0304&lt;el-table-column v-for=”(item index) in tableHead”:prop=”item”:label=”item” //表头展示内容:key=”index” &gt;tableData格式：【{0303: []; 0304: []; },{0303: []; 0304: [];}】是一个对象数组， （四）echarts组件 主要用法：设置chartX和series chartX值：从接口数据中读取，chartX = Object.keys(result); series = [{name,data,type}] 数组，处理后的result push进数组；其中name为图例，data数组，type为line或bar； 读取接口数据，设置chartX，添加series–&gt;chartInit request中包含的请求参数，通过 async fun1 –&gt; try{ await result=this.$service.接口名（request）}–&gt;catch(err){} –&gt;finally{} 图表渲染 setTooltip（提示词中的formatter，修改提示顺序，样式等）， setLegendOption，title， setyAxis（formatter中 小数-&gt;百分比） tooltip提示词修改，排序 图例顺序修改 个人思考：大数据量情况下，echarts会不会慢？如何优化？ 查阅资料，使用echarts中的datazoom方式。 如果不使用monitorChart，自己是否可以渲染图表？ 原本echarts组件所有设置均在option中，monitorChart对echarts的封装，完成配置项即可。 （五）体会&amp;思考 1、组件化封装和使用 单独功能划分为组件，保证组件内功能单一，不会影响其他功能； 封装现有组件进行使用，修改配置项，如monitorCharts组件，对title，chartX，legend，tooltip,type等方面都涉及到；使用时查看组件如何封装、之前如何使用，或”echarts官网–&gt;配置项”都能找到相关设置； 2、通过接口获取数据，进行处理 对接口的封装，理解接口封装的原理，使用request进行请求数据。 后端数据如何处理，转换成自己所需要的格式，进行合理变换，再进行渲染，这一步很重要。 个人思考：大数据量情况下，echarts会不会慢？如何优化？ 如果不使用monitorChart，自己是否可以渲染图表 3、项目整体构思，实现思路 （1）流程图 （2）策略看板–图表相关实现实现思路： （3）所遇难点及解决 难点 原因及解决 1、小数–&gt;百分比保留两位小数问题：Math.floor(num * 10000) /100 不起效果 已解决：(num *100).toFixed(2) ; 2、图例显示顺序要求固定图例顺序及相应颜色 已解决： 在series中给初始值缺点：通用性不好，不易扩展 3、城市监听问题，二级监听中一直晚一步 原因：点击查询后才将城市日期发到vuex中，监听时会造成两次请求接口的参数不一样，导致一直晚一步。解决：在第一个折线图中，初始化时dispatch，让vuex中有日期和城市，table中每次变化，第一个折线图就发到vuex #### （4）后续思考 执行效率 从接口请求数据，转为echarts所需的series格式，然后将series和chartX渲染。在柱状图中，请求数据范围一般在7天到30天，渲染时间5秒以内。 若大数据量，如上百天的情况，使用datazoom为宜，datazoom是echarts自带缩放属性，可拖动x轴坐标的范围，只显示用户选择的数据，方法较好。 如何优化 一是echart渲染问题，使用datazoom；&lt;br /&gt; 二是代码复用方面，三个chart中部分代码是相似的，如chartInit，请求接口等，可进行设定方法参数进行抽取； 缺点是后期扩展不便，可能需要对数据进行其他处理，或增加功能。&lt;br /&gt;","categories":[{"name":"美团实习","slug":"美团实习","permalink":"https://hezhaoxiang.work/categories/%E7%BE%8E%E5%9B%A2%E5%AE%9E%E4%B9%A0/"},{"name":"工作总结","slug":"美团实习/工作总结","permalink":"https://hezhaoxiang.work/categories/%E7%BE%8E%E5%9B%A2%E5%AE%9E%E4%B9%A0/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"实习","slug":"实习","permalink":"https://hezhaoxiang.work/tags/%E5%AE%9E%E4%B9%A0/"}],"author":"He Zhaoxiang"},{"title":"美团实习总结零--git操作和流程","slug":"实习总结零-git","date":"2020-06-10T13:41:00.000Z","updated":"2020-09-07T18:38:14.713Z","comments":true,"path":"2020/about-git/","link":"","permalink":"https://hezhaoxiang.work/2020/about-git/","excerpt":"","text":"常用命令 Git相关git init 新建一个空的仓库git status 查看状态git add . 添加文件git commit -m ‘注释’ 提交添加的文件并备注说明git remote add origin git@github.com:jinzhaogit/git.git 连接远程仓库git push -u origin master 将本地仓库文件推送到远程仓库 1、推到自己的远程分支git add .git commit -m “注释说明”git push //默认全部git pull //如果失败，先pull再push，vs中解决冲突 2、分支管理 git checkout -b fileName ，创建并切换到fileName分支，等价于git branch fName–&gt;（切换）git checkout fName git branch： 查看分支 git switch fName/master ===git checkout fName 都是切换分支 git merge fName： 合并分支到master git branch -d fName： 删除分支 git push origin feature/hzxx 推送到远仓库的分支上创建新分支并拉代码git checkout -b feature/cityDecision-hzx origin/featuregit pullgit merge feature/hzxgit commit -m “merge”git push origin feature/hzx:feature/hzx 创建后，推到自己远程分支git branch –set-upstream-to=origin/feature/cityDecision-hzx feature/cityDecision-hzx 代码合并到远程自己的分支3、thrift发布 （1）thrift网址-&gt;owl API -&gt; snapshots / 1.x-SNAPSHOT-&gt;https://thrift-qcs.sankuai.com/devtool（2）首次：安装rimraf（作用：删除编译好的文件）-&gt;删除编译好的资源-&gt; package.json修改mtfe-&gt; 重新运行 后续使用：修改SNAPSHOT版本–&gt;yarn （3）相关命令npm install rimraf -grimraf node_modules修改package.json “@mtfe/thrift-api-qcs-data-owl” : 1.0.9-SNAPSHOTyarnyarn add xxx@new_versionyarn add [package]@[version] // 安装指定版本，添加到package.json，如果需要精确到小版本，使用-E参数;yarn add rimrafnpm run devnpm run node-dev 4、发布到dev 先发布到feature/hzx 上 切换到dev分支git checkout -b dev origin/dev 查看分支 git branch git pull 拉取 git merge feature/hzx 把hzx合并到dev上，如果有冲突，上半部分HEAD是dev，下半部分是feature/hzx, 解决冲突，二者留一或修改其中一部分 git commit -m ‘merge’ git push origin dev 在cargo上构建dev，启动镜像 另外：pull request到master强制提交：git comit -m “发到master” –add-notify 5、发布到st方法一： 推到自己的远程分支 git add . git commit -m “ziji” git push origin feature/hzxx 界面操作 pull request: feature/hzxx –&gt; release 同意后在plus部署stage 方法二：git checkout -b release origin/release （git checkout release）切换到release分支，自己mergegit pullgit merge feature/hzxgit commit -m “merge” 如果报错，先解决冲突，再git commit -m ‘merge’ –no-verifygit push 6、发布上线master 推到远程自己的分支 git add . git commit -m “备注” git pull origin master 解决冲突，主要是yarn.lock, git push origin feature/hzxx 界面pull request 7、git版本回滚 git refolg 查看版本 git reset –hard abjdkfbaf版本号（或 git reset –hard HEAD@ {3} 数字为序号） git push -f origin feature/hzxx 版本覆盖 git pull origin feature/hzxx 本地回到之前的版本 开发流程 接到需求，进行前端开发。2. 配置功能菜单2. 更新接口snapshot，新版本的接口，在 Thrift 上编译新版本。然后将版本号替换到package.json里面去。3. 前后端联调。4. Merge代码到Dev分支（如上，4、发布到dev）5. 在 Cargo 上构建并部署Dev环境http://cargo.sankuai.com/stack/detail?stack_uuid=5a82826d-10cb-466e-b010-c0a49c39b5e46. 访问 开发环境 并验证 https://plus.mws.sankuai.com/#/release/job/list?releaseId=250177. 如果通过，Merge代码到Release分支。 git merge feature/hzxx界面操作8. 在 Plus 上构建并部署Stage环境 plus-&gt;”部署任务“ -&gt;”staging”9. 访问 Stage环境 进行验证或者回归测试。10. 如果没有问题，Merge代码到Master分支。11. 在 Plus 上构建并部署Production环境 –&gt;发到master之后stash自动构建，等它构建完，自己点部署即可。代码提交流程：Dev(dev) - Staging (release) - Production (master)在Plus上部署staging时，先进行构建，在进行部署。代码提交流程：Dev(dev) - Staging (release) - Production (master)在Plus上部署staging时，先进行构建，在进行部署。","categories":[{"name":"美团实习","slug":"美团实习","permalink":"https://hezhaoxiang.work/categories/%E7%BE%8E%E5%9B%A2%E5%AE%9E%E4%B9%A0/"},{"name":"工作总结","slug":"美团实习/工作总结","permalink":"https://hezhaoxiang.work/categories/%E7%BE%8E%E5%9B%A2%E5%AE%9E%E4%B9%A0/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"实习","slug":"实习","permalink":"https://hezhaoxiang.work/tags/%E5%AE%9E%E4%B9%A0/"}],"author":"He Zhaoxiang"},{"title":"web前端--ES6补充","slug":"ES6-标准入门","date":"2020-05-11T12:31:00.000Z","updated":"2020-09-07T17:55:32.694Z","comments":true,"path":"2020/learnes6-02/","link":"","permalink":"https://hezhaoxiang.work/2020/learnes6-02/","excerpt":"","text":"1、let 与const：暂时性死区• 指向内存地址而不是变量，基本数据类型变量在内存地址中的位置不变，故不变；• 引用数据类型（如对象，数组），可变化；2、声明变量的6种方法• let，const，• var function• import，class3、模板字符串• 模板字符串中嵌入变量，需要将变量名写在${}之中 this is ${user.name}.• 可以使用字符串，若变量不存在则报错4、函数扩展• 参数可以有默认值5、ES6遍历对象得到key的5种方法• for … in• Object.keys(obj) 返回数组• Object.getOwnPropertyNames(obj) 返回数组，前三个都不包含symbol属性• Object. getOwnPropertySymbols（obj）返回数组，包含symbol属性的key6、Symbol第七种数据类型• 用途：用于object对象的属性，保证属性唯一；• 属性名遍历：Symbol变量作为属性，不是私有，但是for in ,Object.keys()等方式不能拿到Symbol的属性名，只能通过Object.getOwnPropertySymbols获取属性名；• 第七种数据类型，相同参数的symbol值不相同 symbol（abc）===symbol(abc) //false• toString()可以转为字符串；let sym = Symbol(); sym.toStriing(); //“Symbol()”• symbol值不相同，可以作为对象的属性来区分同名对象；如• let obj={};obj[sym1]=’hello’; //相当于key：value，即sym1：‘hello’let obj2={ [sym2]:’world’}7、WeakSet• 与set作用相同，只是weakset只能用于对象（obj或数组）去重；• weakset是弱引用，不能进行遍历，可以通过创建weakset，让Foo实例方法只能在实例中使用,foos对实例的引用，不会被计入内存回收机制8、promise• promise（）.then().catch• 第一个参数是resolve，回调成功进入第一个then；• rejected：失败进入catch或第二个then；9、async await• async表明函数中有异步操作，async返回一个prmise，• 根据promise的resolve或reject执行await，reject报错则则进入catch，resolve成功则接着执行await后面；• await放入try-catch，捕捉错误 async function asyncPrint(ms) { try { console.log(‘start’); await timeout(ms); //这里返回了错误 console.log(‘end’); //所以这句代码不会被执行了 } catch(err) { console.log(err); //这里捕捉到错误error } } asyncPrint(1000);10、class• 类定义属性和方法class,constructor,method1方法• get,set方法待查11、数组各种方法12、字符串方法• includes 返回true/false 数组和字符串都支持• startsWith 和endsWith： 返回是否以某字符（或某几个）开头或结尾，true/false。 str1.startsWith（‘hello’）• startsWith 和endsWith（第二个参数）：str1.startsWith（‘hello’， 0）0参数是开始位置• repeat ：str.repeat（3）str重复3遍• 前后补全：padStart(5，ab)–用ab把字符串补全到5个字符；padEnd()• 前后去除空格：trimStart()，trimEnd() const newStr = str.trim();去除前后，返回新字符串；13、数值方法Number• Number.isInteger（true/25/‘25’） false/true/false 判断整数，是数值才为true• Number.parseInt() Number.parseFloat()判断• let y = 0; y = y || 100（y为空时，赋值100）; y值为100；14、BigInt第八种数据类型• 大整数无位数限制，末尾加n，12n， typeof 12n（bigint）• 大整数和整数不相等：1n==1– false• 通过Number可转换大整数为整数，数值过大则显示不准；• BigInt构造函数思路：先转为Number，再转为BigInt； BigInt(1) BigInt(‘1’) 都可以， BigInt(‘1n’)报错（字符串’1n’不能转为数字）；15、函数扩展语法（1）参数默认值 function(x, y = 1) [undefined, 1]（2）参数解构赋值• function({x, y = 1}) 传入参数为对象，进行解构赋值• function({x, y = 1} = {} ) 未传入参数，默认为空对象，使用【undefined，1】• （function({x, y = 1} = {} )）.length = 1 length值为没有默认值的参数个数；• （function(…args)).length = 0;（3）name属性• const fun1 = function add(){} fun1.name // add• function add(){} add.name // add（4）箭头函数• 省略写法：var sum = (num1,num2) =&gt; num1+ num2; 只有一行语句时省略{}和return；• var sum = function(num1, num2) { return num1 + num2};• rest剩余参数：const Number = (…num) =&gt; num; Number(1,2,3) //[1,2,3]• this指向：一直指向定义时的this，即在参数中使用的this；箭头函数创建一个新的内存，指向新内存，即指向定义；• function foo(){ setTimeout(()=&gt;)}• 柯里化currying：将多参数变为单参数形式；• catch在ES2019中：try{} catch(err){} 或catch{}都可以；16、 数组方法find、findIndex• find返回符合条件的第一个值，arr.find(i =&gt; i &lt;0); 不存在符合条件的-&gt; undefined• findIndex返回第一个index，没有则-1；• includes方法返回true/false,相比indexOf（返回第一个位置或-1）优势：语义明显，不用和-1 比较（1）改变原数组• pop()：删除数组最后一个元素，并返回该元素• push()：在数组尾部添加元素，并返回更新后的数组长度• shift()：删除数组的第一个元素，并返回该元素• unshift()：在数组第一位添加元素，并返回更新后的数组长度• sort()：对数组排序（按字符ASCII进行排序），也可添加回调函数按照想要的规则排序• reverse()：数组反转• splice(index, 个数, 新数据)：返回被删除元素所组成的数组。（2）不改变原数组map，reduce，foreach，indexof findindex，some，every，concat• map返回一个新数组• reducelet res = args.reduce((sum,i)=&gt;{ return sum += i;},0);//或者结果：四个参数：累计值：必需当前值：必需当前索引：可选当前值所在数组：可选 作用：1、数组求和：return args.reduce((a,b)=&gt; a+b);2、扁平化flat：arr.reduce((res,i)=&gt; res.concat(i), []);• concat：返回新数组let newArr = [].concat(1,[2,3],[4]);// 是否有扩展符…不影响• 其他17、对象（1）对象简写let num =’1’;let obj1 = {num}; //定义对象，属性名就是num，值是1等价于: let obj1 = { num:num, method(){…},}（2）5种方法对象遍历 Object.getOwnPropertyNames（obj1）","categories":[{"name":"web前端","slug":"web前端","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"ES6","slug":"web前端/ES6","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/ES6/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"https://hezhaoxiang.work/tags/ES6/"}],"author":"He Zhaoxiang"},{"title":"不能不知道的HTTP","slug":"3月18-日报--http","date":"2020-03-18T12:36:00.000Z","updated":"2020-04-01T18:11:05.920Z","comments":true,"path":"2020/http/","link":"","permalink":"https://hezhaoxiang.work/2020/http/","excerpt":"","text":"一、入门部分 1、cache-control缓存设置 max-age=100：静态资源缓存100秒 public/private:只能在客户端/代理服务器 缓存 must-revalidate：缓存过期后，到服务端验证才能继续使用缓存 no-cache/no-store:是否使用缓存 2、缓存验证（缓存与服务器内容是否相同） last-modified配合if-modified-since etag配合 if-none-match 3、头部 content-type conten-encoding：数据类型 cookie：保持会话信息 CORS实现跨域并保证安全 4、TCP部分 https链接创建过程，为什么https安全 长链接，为什么需要 http2的信道复用为什么能提高性能 5、输入url后http请求返回的完整过程 redirect跳转–》app cache–》DNS解析域名–》创建TCP连接–》request发送请求–》response接受响应 二、基础知识 1、五层模型 应用层（http，ftp）–传输层（TCP，UDP）–网络层–数据链路层–物理层 2、http1.1（增加一些host命令） http2 数据以二进制传输，头信息压缩和推送（服务器主动推送html，js等到客户端）提高效率。 3、http三次握手（1）客户端C–&gt;服务端S：发送标志位SYN=1，序列号seq=x（2）S–&gt;C: SYN =1, seq=y 确认号ack=x+1（3）C–&gt;S: seq=z ack=y+1 4、URI， URL，URN URI =URL+URN 统一资源标志符： 标识互联网上的唯一资源； URL 统一资源定位器:访问链接 基本形式：协议+主机+端口号+路径path参数 URN永久统一资源定位符，移动后仍能访问 5、http报文 起始行： 请求方法+URL+协议版本 协议版本+状态码 header首部 6、http方法get post delete 7、CORS跨域 两种解决跨域请求办法 8、CORE预请求 默认允许的method请求方法：GET POST HEAD( delete等不行) 默认允许的content-type ：text/plain、 multipart/form-data 、application/x-www-form-urlencoded 预请求：’Access-Control-Allow-Methods’:’PUT.POST,DELETE’ //使得预请求允许 通过请求方法options，让服务器允许后续的post请求 9、缓存头cache-control (header中) (1)可缓存性 public : 经过的地方（客户端和代理服务器）都可进行缓存 private：只有发起请求的浏览器可以进行缓存 no-cache：不允许缓存（本地可以有缓存，下次使用缓存需要服务器先验证） 区别 于no-store：完全不允许缓存 （2）到期 浏览器中：max-age=&lt;&gt;多少秒 代理服务器中： s-maxage 服务器中：max-stale，即使浏览器中过期，max-stale不过期也能继续使用 （3）重新验证 must-revalidate：过期后必须重新到服务器端进行请求 proxy-revalidate：缓存服务器过期去原服务器请求 10、资源验证 (header中) 两种验证头 last-modified：上次修改时间 配合if-modified-since或者if-unmodified-since验证是否修改 etag 数据签名（如进行hash）配合if-match或if-none-match判断签名是否变化 11、Cookie (header中) 通过set-cookie设置，下次请求时后自动带上 cookie形式：键值对key=value id=1223，可有多个 set-cookie：[‘id-1’,’ad=2’] cookie属性 max-age和expires设置过期时间 secure只在https中使用 httpOnly不能通过document.cookie访问 12、session 作为会话连接，通常使用cookie的key作为session，二者不相等， 释放链接后消失，而cookie通常存在缓存中 13、http长链接 connection：Keep-Alive 继续保持，可以复用 一个TCP链接可以有多个http链接 14、数据协商客户端和服务端协商数据 （1）请求Accept accept指定想要的数据类型 accept-encoding压缩方式：gzip ，deflate ，br（较新，压缩比高） accept-language :’zh-CN’ ‘en’ user-Agent: 包括win10系统,浏览器内核，浏览器版本等信息 （2）服务端返回Content Content-Type content-encoding content-language 15、redirect重定向 资源转移到别的地方 location：‘/new’ 16、CSP（Content-Security-Policy）内容安全策略 （1）作用 限制资源获取 报告资源获取越权 （2）限制方式 default-src 限制全局/部分 script-src 制定资源 范围 ‘Content-Security-Policy’ : ‘default-src &#39;http&#39;self\\ ‘不能通过链接方式获取该资源,不能跳转出去","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"https://hezhaoxiang.work/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"http","slug":"计算机基础/http","permalink":"https://hezhaoxiang.work/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/http/"}],"tags":[{"name":"http","slug":"http","permalink":"https://hezhaoxiang.work/tags/http/"}],"author":"He Zhaoxiang"},{"title":"web前端--ES6模块化和webpack","slug":"3月17-日报 ES6模块化和webpack","date":"2020-03-17T15:36:00.000Z","updated":"2020-04-01T18:10:03.083Z","comments":true,"path":"2020/es6-webpack/","link":"","permalink":"https://hezhaoxiang.work/2020/es6-webpack/","excerpt":"","text":"内容同步更新在语雀笔记里~ 一、ES6模块化 模块化 将一个功能封装到一个模块中，模块之间相互隔离，通过接口调用； 代码复用，便于管理和后期维护。 浏览器模块化规范 AMD：require.js CMD: Sea.js 服务器端模块化规范 CommonJS: 1、模块分为单文件模块和包 2、模块导出 module.export 和exports 3、导入require（’模块标识符’） ES6模块化（浏览器与服务器通用）定义规范 每个js是单独的文件 导入模块成员用import，暴露使用export node.js中使用bable实现ES6模块化 bable：语法转换插件 npm install –save-dev @bable/cli，polyfill等 项目中创建bable.config.js文件如下，然后npx bable-node index.js，在index.js中 运行bable插件 导出 默认*export default { 变量 } *可以将模块中的私有变量暴露出去 按需导出 export function sum= fumction（）{} 导入 import 接收名 from ‘./sum.js’ 按需导入 import { s1 } from “./m1.js” s1需要和按需导出的相同 直接导入并执行模块代码 import ‘./m1.js’ ,不暴露m1的成员，直接执行m1.js 二、webpack 1、webpack 前端项目打包工具 功能：模块化友好，代码压缩混淆、js兼容问题，性能优化等 ul&gt;li{这是第$个}*9，实现9列 2、基本使用 npm init -y 初始化webpack，创建package.json文件，然后创建src文件夹，index.js中包含所用的方法 3、在项目中使用 npm install webpack webpack-cli -D，然后创建package.config.js 在package.json中， 4、打包的入口和出口 默认入口：src-&gt;index.js 打包输出文件： dist-&gt;main.js 修改默认出入口 5、webpack自动打包 npm install webpack-dev-server -D安装，修改package.json-&gt;script dev：”webpack-dev-server”，index.html中引用的script改为bundle.js 然后运行 npm run dev 6、配置html-webpack-plugin生成预览页面 npm install html-webpack-plugin -D安装插件 7、package.json中的配置 –open 打包后自动打开网页 –host 配置ip –host 127.0.0.1 –port配置端口 –port 8888 8、webpack加载器–loader打包非js结尾的模块 打包css/less/sess文件 npm i style-loader css-loader -D安装less-loader/sess-loader 9、webpack加载器–配置postCSS自动添加css兼容前缀 运行npm i postcss-loader autoprefixer -D 根目录创建配置文件postcss.config.js,并在webpack.config.js中module-&gt;rules中加入postcss-loader ** 10、webpack加载器–打包图片和字体 npm i url-loader file-loader -D 在webpack.config.js中module-&gt;rules中加入如下规则 11、webpack加载器–打包js文件中的高级语法 安装babel转换器相关的包 12、webpack加载器–配置vue组件 npm i vue-loader vue-template-compiler -D 13、webpack使用vue npm i vue -S 安装 14、webpack 打包发布vue 在package.json 中配置scripts： “build”：”webpack -p”,即可通过npm run build 打包","categories":[{"name":"web前端","slug":"web前端","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"webpack","slug":"web前端/webpack","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/webpack/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"https://hezhaoxiang.work/tags/webpack/"}],"author":"He Zhaoxiang"},{"title":"web前端--ES6初探","slug":"3月16日报-ES6 copy 3","date":"2020-03-10T10:36:00.000Z","updated":"2020-09-07T18:08:49.588Z","comments":true,"path":"2020/learnes6-01/","link":"","permalink":"https://hezhaoxiang.work/2020/learnes6-01/","excerpt":"","text":"let声明变量 ES6中新增的变量，只在块级作用域中有效（一个大括号中）； 防止循环中的变量变成全局变量； 不存在变量提升，暂时性死区（一个大括号内，对let变量先使用后定义，报错undefined）如：var num=10；if(1){ console.log(num) let num; } const声明常量 值不可更改（值对应内存地址），具有块级作用域，声明时必须赋值，否则报错； var 存在变量提升，作用域是整个函数 解构 从数组中提取值，变量对应的位置进行重新赋值。如let【a,b,c,d】=[1,2,5] 解构不成功的部分为undefined，如d 允许使用对象属性和变量名匹配，把值赋给变量，如let person ={name：“bob“} let {name}=person 如：*let{name：myname } = person *，把person中的bob赋值给myname 箭头函数 （）=&gt;{} 使用方法：通常把箭头函数赋值给变量，然后调用，如 const fn = （）=&gt;{ console.log(1)}; fn(); 函数中只有一行代码，大括号可省略,return可省略如： const sum=(n1,n2)=&gt;n1+n2; sum(3,5); 只有一个形参，小括号可省略const sum = n1=&gt;n1 箭头函数不绑定this关键字，其中的this指向函数定义上下文的this 剩余参数 const sum= （…args）=&gt;{} …表示接受所有参数。 扩展运算符 用于数组合并 let array3=【…ary1,…ary2】 用于数组push ary1.push（…ary2） 将伪数组或对象转换为数组 Array扩展方法 from,转换为数组 find 找到某元素 var id = arraylike.find(item=&gt;item.id==2) findIndex,找到下标，否则-1 let findex = alike.findIndex((item,index)=&gt;item==100) includes（），是否包含某值， 返回true和false 【1，2，3】.includes（4） String，模板字符串 模板字符串：反引号定义字符串，可以通过${变量名}来引用 可以使用${函数名}调用, 模板字符串可以包含换行可以 扩展方法startsWith 和endsWith 返回是否以某字符（或某几个）开头或结尾，true/false。 str1.startsWith（‘hello’） repeat str.repeat（3）str重复3遍 Set数据结构 值唯一，没有重复值(自动去重) const s1= new Set([1，1，1，3,3,5,7]); Set实例方法：s1.add(3), delete(), has(), clear()","categories":[{"name":"web前端","slug":"web前端","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"ES6","slug":"web前端/ES6","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/ES6/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"https://hezhaoxiang.work/tags/ES6/"}],"author":"He Zhaoxiang"},{"title":"web前端--JavaScript（五）JavaScript高级程序设计-笔记总结-1-6章","slug":"web前端--JavaScript（六）JavaScript高级程序设计-笔记总结-7-章","date":"2020-02-21T11:36:00.000Z","updated":"2020-03-11T19:40:04.255Z","comments":true,"path":"2020/learnjs05-base0/","link":"","permalink":"https://hezhaoxiang.work/2020/learnjs05-base0/","excerpt":"","text":"大致看过一遍红宝书，想让自己留下点东西。 script属性 defer属性，表示加载完dom后再解析js，只适应于外部js脚本。 async属性：当前js脚本加载不必等其他脚本，不能保证异步正常展示。 外部js优点： 可维护性 可缓存：两个页面使用同一js，只要加载一次。 js语句的分号建议一直使用；； 数据类型 基本：字符，数值，布尔（true和false区分大小写），null，undefined 引用类型：数组，对象 typeof temp或者typeof（temp） ty**peof null 返回object** 3，14e2=314 数值 特殊数值NaN：涉及的操作均为NaN；与任何值不等，不等Nan Number（）：null和空字符串–》0 parseInt（”124as”）空字符–》Nan var num= Math.pow(5,2) //25 字符 num.toString（）,num.String() num.valueOf()返回数组形式 concat或者+： 拼接 str1.trim() 变量 函数内定义的var temp变量，在函数外会被销毁，而只定义temp作为全局变量会保留； 不能重载，即函数覆盖。作用域链 在执行环境中可以访问相应的变量，函数外不能访问函数内的，内可以访问外的。 垃圾收集的策略 标记清除：不使用的值加标记，离开执行环境即清除。 引用计数：引用次数，归0时清除。 数组item Array 栈push pop 队列shift取出第一个，unshift末尾增加 reverse（）反转 color.slice（1）,转为拼接字符串 num.indexOf(6) 返回下标或-1 splice（）删除，插入，替换 filter（）过滤，括号内+条件-》 map（function(){}）数组值转换 reduce（function）迭代累加 正则表达式 var patten1 = /[cb]at/i; //匹配第一个包含cat和bat的字符 var patten2 = /{cb}at/i; {cb}at var jiewei=/.doc/gi; 函数内置属性 arguement.callee: 消除紧密藕合，即，在别处也可使用该函数（递归调用后，可以继续使用） this，函数在全局作用域运行时，this=window eval（）内的变量或函数都不会提升 创建对象（五种方式） 工厂模式：函数内创建对象，最后return 对象。使用时var person= createPerson（‘hzx’，29） 构造函数：函数内使用this，无需return。使用时var person = new creatPerson（） 原型模式: prototype所有成员共享属性和方法，各自实例可以修改自己的值。**存在问题：两个实例共享的原型，属性值是引用类型时，该值会被共享。2、** function Person { person.prototype.name=name } 组合使用构造函数和原型：构造函数定义实例，原型定义共享的属性和方法 动态原型：属性和方法，在方法中使用prototype 原型链理解 一个原型对象A（包括属性和方法）被另一个原型B继承，B可以使用A的属性和方法。 B.prototype= new A() 存在问题：1、引用类型的属性值会共享 2、无法向原型A中传参。解决方法（借用构造函数和组合继承） 借用构造函数 使用call（）和apply（）: 子构造函数中，funA{ funA.call(this)} 组合继承（使用最多） 使用原型链实现原型的属性和方法继承 借用构造继承实例的属性","categories":[{"name":"web前端","slug":"web前端","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"web前端/JavaScript","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://hezhaoxiang.work/tags/JavaScript/"}],"author":"He Zhaoxiang"},{"title":"web前端--JavaScript（五）JavaScript高级程序设计-笔记总结-1-6章","slug":"web前端--JavaScript（五）JavaScript高级程序设计-笔记总结-1-6章","date":"2020-02-21T11:36:00.000Z","updated":"2020-03-11T19:40:04.255Z","comments":true,"path":"2020/learnjs05-base0/","link":"","permalink":"https://hezhaoxiang.work/2020/learnjs05-base0/","excerpt":"","text":"大致看过一遍红宝书，想让自己留下点东西。 script属性 defer属性，表示加载完dom后再解析js，只适应于外部js脚本。 async属性：当前js脚本加载不必等其他脚本，不能保证异步正常展示。 外部js优点： 可维护性 可缓存：两个页面使用同一js，只要加载一次。 js语句的分号建议一直使用；； 数据类型 基本：字符，数值，布尔（true和false区分大小写），null，undefined 引用类型：数组，对象 typeof temp或者typeof（temp） ty**peof null 返回object** 3，14e2=314 数值 特殊数值NaN：涉及的操作均为NaN；与任何值不等，不等Nan Number（）：null和空字符串–》0 parseInt（”124as”）空字符–》Nan var num= Math.pow(5,2) //25 字符 num.toString（）,num.String() num.valueOf()返回数组形式 concat或者+： 拼接 str1.trim() 变量 函数内定义的var temp变量，在函数外会被销毁，而只定义temp作为全局变量会保留； 不能重载，即函数覆盖。作用域链 在执行环境中可以访问相应的变量，函数外不能访问函数内的，内可以访问外的。 垃圾收集的策略 标记清除：不使用的值加标记，离开执行环境即清除。 引用计数：引用次数，归0时清除。 数组item Array 栈push pop 队列shift取出第一个，unshift末尾增加 reverse（）反转 color.slice（1）,转为拼接字符串 num.indexOf(6) 返回下标或-1 splice（）删除，插入，替换 filter（）过滤，括号内+条件-》 map（function(){}）数组值转换 reduce（function）迭代累加 正则表达式 var patten1 = /[cb]at/i; //匹配第一个包含cat和bat的字符 var patten2 = /{cb}at/i; {cb}at var jiewei=/.doc/gi; 函数内置属性 arguement.callee: 消除紧密藕合，即，在别处也可使用该函数（递归调用后，可以继续使用） this，函数在全局作用域运行时，this=window eval（）内的变量或函数都不会提升 创建对象（五种方式） 工厂模式：函数内创建对象，最后return 对象。使用时var person= createPerson（‘hzx’，29） 构造函数：函数内使用this，无需return。使用时var person = new creatPerson（） 原型模式: prototype所有成员共享属性和方法，各自实例可以修改自己的值。**存在问题：两个实例共享的原型，属性值是引用类型时，该值会被共享。2、** function Person { person.prototype.name=name } 组合使用构造函数和原型：构造函数定义实例，原型定义共享的属性和方法 动态原型：属性和方法，在方法中使用prototype 原型链理解 一个原型对象A（包括属性和方法）被另一个原型B继承，B可以使用A的属性和方法。 B.prototype= new A() 存在问题：1、引用类型的属性值会共享 2、无法向原型A中传参。解决方法（借用构造函数和组合继承） 借用构造函数 使用call（）和apply（）: 子构造函数中，funA{ funA.call(this)} 组合继承（使用最多） 使用原型链实现原型的属性和方法继承 借用构造继承实例的属性","categories":[{"name":"web前端","slug":"web前端","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"web前端/JavaScript","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://hezhaoxiang.work/tags/JavaScript/"}],"author":"He Zhaoxiang"},{"title":"购物首页开发","slug":"Vue购物，选它就对了！","date":"2019-12-26T14:30:00.000Z","updated":"2020-09-07T18:58:28.636Z","comments":true,"path":"2019/mall-home-all/","link":"","permalink":"https://hezhaoxiang.work/2019/mall-home-all/","excerpt":"","text":"零、说明本demo是跟随coderwhy老师学习Vue做的，跟着视频一点点敲的，视频可以在b站上找到，仅限个人学习，侵删（应该不涉及侵权吧，就当给老师宣传了哈哈哈，视频真的讲的很细致，一点点学还是有收获的，自己码的demo在这里！博客里有github） 一、整体思路1、效果图先上整体效果图~)这是我跟着视频做的，主要分为四个功能模块“首页、分类、购物车、我的” 2、首页功能目前基本实现首页，首页中包括以下几个功能（从上到下）： 标题栏Navbar 本周流行recommend 商品栏tab-control 商品列表goodList 导航栏（应该是0步，最先开始） 最下方的导航栏作为公共组件，可复用。 二、首页具体实现0、导航栏tabbar思想：组件复用 1, CSS格式引用normalize.css：常用格式，从github上引用css引用方式：（1）在html中：&lt;link ref=&quot;xx.css&quot;&gt;（2）在另外一个css中： @import&quot;css文件路径/url&quot; 2，组件引用路径配置根目录下创建 vue.config.js 图片的引用路径，前加~修改icon网站图标：在public中 favicon.ico 3, 顶端导航组件nav-tab-bar，创建组件，使用插槽将顶部的bar分为左中右三部分，在首页中只展示center的slot内容“购物街” 4, 请求多个数据 6， tab-control流行、新款、精选position: stickytop: 44px //设置可随页面下滑，上滑到44处固定 7， 商品列表数据，获取保存所有数据data{pop:{page:0,list:[]},news:{page:0,list:[]}sell :{page:0,list:[]}} 8, 点击，显示相应列表数据9， 移动端滑动效果使用better-scroll框架（github）安装： npm install better-scroll –save局部滚动 ref如果是绑定在组件中的，那个通过t*his.$refs.ref名字 *获取的是一个元素对象。 10，back-top实现监听组件的原生事件方法一：使用修饰符click.native方法二：在组件内使用this.$emit传给组件，再实现函数","categories":[{"name":"Demo","slug":"Demo","permalink":"https://hezhaoxiang.work/categories/Demo/"},{"name":"购物-Vue","slug":"Demo/购物-Vue","permalink":"https://hezhaoxiang.work/categories/Demo/%E8%B4%AD%E7%89%A9-Vue/"}],"tags":[{"name":"购物","slug":"购物","permalink":"https://hezhaoxiang.work/tags/%E8%B4%AD%E7%89%A9/"}],"author":"He Zhaoxiang"},{"title":"使用电脑，你不能不知道的技巧","slug":"使用电脑，你不能不知道的技巧","date":"2019-12-19T13:00:00.000Z","updated":"2019-12-22T11:58:32.000Z","comments":true,"path":"2019/how-to-use-pc/","link":"","permalink":"https://hezhaoxiang.work/2019/how-to-use-pc/","excerpt":"","text":"（一）学计算机必备先占，待更12月21日，继续更前几日入手了一台新笔记本，于是准备重新装一些日常用的软件，学习前端或者程序员必备的几个软件：chrome谷歌浏览器，git.bash,webstorm或者VS Code，主要是这些，附推荐理由： 谷歌浏览器：觉得应当人手必备，扩展程序支持很多功能，adblock插件（去广告），vue dev插件调试很方便，oneTab插件（网页整理成列表，打开多个网页去找很方便），还有一个油猴子插件（百度就能搜到安装方法，功能真的很强大，附个截图就懂了 这些都是油猴子中的脚本，使用时打开，不用的时候就关上，也不占内存。 git：配合github使用更香哦，主要是用以将代码上传到github下载到本地，同步很方便。 webstorm或者VS Code：前者是专用于web开发，我现在也在用，后者功能也很强大，知乎不少程序猿推荐。webstorm和idea这些软件同属一家公司研发，使用学校的edu邮箱注册能免费用一年，或者百度有破解的方法，弄比较费时间就直接用邮箱注册了。（二）高效软件1，WindowsTabs标签页上图： windowTab来管理标签页很方便，不用alt+Tab键来切换，直接点击就可以，软件也很小2m多一点。本方法用的是汉化pojie版，所以能支持任意个标签页，而老东家microsoft给的正版只能打开三个，想任意个就得付费了，毕竟那么好用。所以我就给出了我在网上找到的安装包，如下：WindowsTabs 链接 2，everything搜索文件真的真的，很方便！安装包也很小，2m左右，打开窗口可以在几秒内搜到你想找的文件，比win系统自带的文件搜索快的太多太多，秒搜，sousou~everything链接 3，Snipaste 秒杀一切的截图软件确实不夸张，占内存小，一键截图，支持贴图按F1截图，按F3贴图（随意贴在桌面上备用，用完一键删除）。曾经我也是用qq带的截图功能ctrl+alt+A，但是有了snipaste，真心方便也有其他功能的设置，觉得麻烦直接双击安装就可以。在这里 4， infinity谷歌浏览器插件用着很舒服，不得不说，设计的很人性化，上使用截图支持浏览器内换壁纸，这里只是展示一部分，还有很多小功能infinity都自带了，安装谷歌浏览器插件的方法（1）“科学上网”在谷歌商店中搜infinity插件（2）把我给的crx插件直接拖到扩展程序中，使用开发者模式就可以。 5，语雀云笔记在此首先说明onenote的情况，在最开始用的是win自带的记事本，不常保存，经常是记下但是最后忘了存在哪，后来使用**OneNote**，功能真的很强大，加上fixed和reminder这些插件，用起来会方便很多，**but！！！太卡了！！！**OneNote的同步功能需要登录microsoft账户，记得也是需要科学上网，每次启动因为同步和登账户都要卡那么几分钟，所以**OneNote用起来就感觉很笨重**。&lt;br /&gt; 现在国内也有好几款云笔记或者软件，用来记笔记的，有的需要收费，有的是有限制，综合考虑，选择[语雀](https://www.yuque.com/)，云平台，打开浏览器窗口放着，需要的时候就记一下，不用就开着一个浏览器窗口，占的内存相对小太多了有木有！&lt;br /&gt;**支持markdown格式导入，插入图片，能直接创建思维导图，还能插入视频！写博客也方便了，在语雀上写完直接复制出去就能用，图床也省了。**你们有的功能我都有，我还是云存储，不占内存，某note还怎么比？？从某note果断转语雀。 划线还未使用，知乎好评： cclearner清理spacesniffer释放内存天若OCR识字思维导图：xmind 用语雀代替 如果使用的是onenote，附上两个插件，但是真心不如云笔记： fixone修复，每次打开时方便reminder闹钟提醒，弹窗 微软输入法，右侧带表情包 onedrive网盘功能，可生成分享链接，太卡遂弃 edge浏览器，阅读标注PDF 这个功能是最近才发现的，edge浏览器一般不用，都用谷歌，阅读器用的福昕，发现这个功能后福昕也卸了。注：如果网盘文件不能用了，进我博客就有联系方式了见个人主页","categories":[{"name":"Demo","slug":"Demo","permalink":"https://hezhaoxiang.work/categories/Demo/"},{"name":"小技巧","slug":"Demo/小技巧","permalink":"https://hezhaoxiang.work/categories/Demo/%E5%B0%8F%E6%8A%80%E5%B7%A7/"}],"tags":[{"name":"电脑技巧","slug":"电脑技巧","permalink":"https://hezhaoxiang.work/tags/%E7%94%B5%E8%84%91%E6%8A%80%E5%B7%A7/"}],"author":"He Zhaoxiang"},{"title":"vue-router深入学习","slug":"vue-router深入","date":"2019-12-17T13:00:00.000Z","updated":"2019-12-17T13:36:40.000Z","comments":true,"path":"2019/learn-vue-router/","link":"","permalink":"https://hezhaoxiang.work/2019/learn-vue-router/","excerpt":"","text":"#一、router路由发展的几个阶段##1、后端路由阶段后端渲染：前端只有html和css，后端通过jsp等技术渲染页面，再交给前端。后端路由：后端处理url和页面映射之间的关系。后端通过正则匹配url，controller控制器来处理匹配的页面，把html返回给前端。 ##2、前后端分离阶段 后端负责数据，前端渲染：网页中的内容大部分是由前端写的js在浏览器中执行，后端负责提供API和数据 ##3、前端路由阶段（SPA单页面富应用阶段）整个网页只有一个html页面（包含html+css+js），当用户点击时，从url1–&gt;url2，通过前端路由，加载url2的内容（在vue中就是加载一个组件。）改变url页面不整体刷新，两种实现方式： （1）改变url的hash，location.hash=’aaa’ （2）html5中的history模式pushState,history.pushState({},’’,’home’)三个参数为data title url。history.pushState入栈history.go(-1)=history.back()出栈history.forward()=history.go(1)#二、基础知识0##1、懒加载build打包时，appxxx.js文件变得很大，使用懒加载更高效。router懒加载：用到的时候再加载。把不同路由对应的组件分割成不同的块，路由被访问时才加载对应组件，这样更高效。 ##2、嵌套路由（1）创建子组件children，路由映射中配置（2）在组件内使用##3、传递参数params和queryparams:是路由的一部分，一般params后接userid或name，展示:$router.params.useridquery:查询，即拼接在url后面的内容，url统一资源定位符格式：协议：//主机名:端口号（默认80，即不显示）/路径?query#fragment片段通过查询&lt;router-link :to=&quot;{path: &#39;/profile&#39;, query:{name:&#39;zx&#39;,age:&#39;25&#39;}}&quot; tag=&quot;button&quot;&gt;档案&lt;/router-link&gt;对应url中的内容发生变化#三、router基础1 1.router和route区别 router是vue中本身创建的class，ctrl加点击可跳转到类中。 所有的组件都继承自Vue的原型。在main.js中定义的方法全局可用。$router为VueRouter实例，想要导航到不同URL，则使用$router.push方法 route仅为当前活跃的跳转所用。 $route为当前router跳转对象里面可以获取name、path、query、params等 2.导航守卫在不同页面之间跳转时，title不变，使用导航守卫来监听跳转动作，实现title变化router.beforeEach（{window.document.title= to.meta.title //在钩子（routes）中定义标题，meta：titlenext() //next需要包含，它是一个函数，跳转到route}）beforeEach是守卫（guard）函数，有to,from,next三个参数。afterEach（后置钩子函数，不用next） 全局守卫：beforeEach和afterEach 路由独享守卫：配置在router中 beforeEnter：（to,from,next）=&gt;{next()} 组件内部守卫：beforeRouteEnter(不能获取实例中的this), beforeRouteUpdate(),beforeRouteLeave。 3. keep-alive是vue的内置组件。在使用keep-alive之前，每次从首页跳转到关于，组件都会被销毁，再点首页，又重新创建（生命周期）。为了不这样多次创建销毁，使用keep-alive： &lt;``kee-alive exclue=&quot;profile,about&quot;&gt; //profile组件会被从创建销毁，没有保持alive,profile和alive之间不能加空格 &lt;router-view/&gt; &lt;/lkeep-alive&gt; activated和deactivated只有在使用keep-alive时才有效。","categories":[{"name":"web前端","slug":"web前端","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"Vue学习","slug":"web前端/Vue学习","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/Vue%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Vue-router","slug":"Vue-router","permalink":"https://hezhaoxiang.work/tags/Vue-router/"}],"author":"He Zhaoxiang"},{"title":"教你半小时搭建博客网站-HEXO-hueman主题个人定制","slug":"搭建个人博客网站-HEXO-hueman主题","date":"2019-12-11T01:00:00.000Z","updated":"2020-04-01T18:23:30.239Z","comments":true,"path":"2019/hexo-hueman/","link":"","permalink":"https://hezhaoxiang.work/2019/hexo-hueman/","excerpt":"","text":"没错，半小时入门，能搭起来网站，然后后期修改等一共预计整体耗时2-5天。采用HEXO搭建个人博客，配合其中的hueman主题，根据个人需要进行修改，整体都托管在github上。在万网申请一个域名，来解析对应的github，就可以访问啦~ 整体流程一、申请github账号，本机电脑安装git，node.js二、通过hexo创建博客网站三、下载hexo中的hueman主题四、hueman主题基本修改+域名解析五、开始写第一个博客六、博客menu菜单栏、侧边展开定制七、字数统计、访问量统计、评论系统 百度和谷歌收录SEO 一、申请github账号，本机电脑安装git.bash，node.js 1、github申请，注册等等不再赘述，有github账户后，创建一个仓库repository,仓库名必须和你的github用户名一致，操作如下图。 repository的作用是，将你的hexo博客部署在github上，由github托管你的博客载体，后期维护只需要添加内容即可，不需要另外申请服务器来存你的博客。 在本机（windows）安装git.bash和node：官网下载安装包，并添加到系统变量（如果在此之前你有类似webstorm或VS这样的编辑器，应该有node环境）。 二、通过hexo创建博客安装hexohexo是一款开源的博客系统，也是一个制作博客的工具。开源是因为hexo源码可见，你可以随自己的想法来定制修改，另一方面hexo现在集成度很好，很多功能都已经兼容，而且有上百种主题（hueman主题就是其中之一，功能最丰富的就是NexT主题）。自己先创建一个文件夹，该文件夹用来存hexo和以后你的博客，在cmd或者Git中进入到你的文件夹，执行：npm install -g hexo通过npm安装并生成（generate）hexo，初始化hexo init再通过以下命令即可在浏览器中打开博客：hexo c（或者全写 hexo clean，先对hexo清理）hexo g（或者全写hexo generater，生成hexo网站，相当于平时所用的build或debug）hexo s（即hexo serve，开启服务）此时在浏览器中输入localhost:4000 即可查看。当你在浏览器里看到网站时，不要悲伤不要心急，忧虑的日子总会过去，因为到这里我们已经完成了第0步，如果加上安装node那些，这里已经由半小时了吧哈哈哈。后面还要，，，放张图，你懂我的意思吧##三、下载hexo中的hueman主题博客换成hueman主题hueman主题是hexo上百种主题的一种，可以挑你喜欢的风格，不同风格对应的功能也不一样，很多要后期自己配置，此处放hexo各种主题备选很多博主都选用了NexT主题，功能很强大，不过风格我不大喜欢，看到一位小姐姐visugar和一位帅小哥的博客时眼前一亮，简单清晰，想找的内容第一眼就能看到，就它hueman了！在你创建的文件夹（即根目录）下，从hexo的github上git下载hueman主题，以下指令会自动下载到你的themes文件夹中，注意别整错位置了。git clone https://github.com/ppoffice/hexo-theme-hueman.git themes/hueman在根目录下的_config.yml文件中修改theme，默认是landscape，就是你第一次打开的主题。修改为：theme: hueman修改完，浏览器里就直接变了？？年轻！先保存，然后：hexo chexo ghexo s再次刷新浏览器，才能看到新主题。是的，现在我们完成了第1步。 四、hueman主题基本修改+域名解析1、hueman修改logo、副标题和网站icon等 logo：对应那个“hueman”图片，图片位置\\myblog（根目录，你创建的那个）\\themes\\hueman\\source\\css\\images\\logo-header.png 替换文件名 副标题（subtitle）: Do what u love, love what u do：\\myblog_config.yml 在config文件中找到相应位置，添加内容，另外注意：冒号后面有一个空格，否则会报错 网站icon： 打开网址时浏览器标题栏里的小图标\\themes\\hueman\\source\\css\\images，icon文件添加到这个文件夹中，并在hueman的config文件中找到这一行favicon: css/images/favicon.ico # path to favicon，附两个生成icon的网址，很好用:生成icon和icon库 title：打开网址时浏览器标题栏里的内容 \\myblog_config.yml，就在开头很好找。 域名解析这里就要用到最开始说的那一步了–github，截至目前，你的网站已经可以在本地运行，并且作了基本修改，那么下一个就是把这个网站放到网上，别人可以通过浏览器上网访问你的博客。[原理图]是这样的： （1）别人在浏览器里输入网址(域名，需要购买，1块钱！！)–&gt;（2）浏览器解析这个域名对应到服务器A处–&gt;（3）A服务器将存好的页面展示出来，OK √现在（3）中的页面内容已经有了初始化,本地服务器hexo也有了，但是不能联网，所以将hexo托管到github，由github充当服务器A的角色，在域名中解析你的github的ip地址。现在要做的事：(a)github创建仓库4o4NotFoundd.github.io（见一，用你自己的github用户名）–&gt;(b)本地hexo部署到github–&gt;(c)购买域名,添加解析–&gt;(d)调试结果 （a）创建仓库,ssh验证在本地git.bash中：git config --global user.name &quot;你的用户名，我的是4o4NotFoundd&quot;git config --global user.email &quot;注册时使用的邮箱&quot;生成ssh（ssh是一种通信方式，让你的本地git和github正常通信，能上传到github）ssh-keygen -t rsa -C &quot;你的邮箱&quot;这一步会在你的电脑上生成一个带“pub”字样的公钥和一个私钥，把公钥复制添加到你仓库（Setting那里）的ssh key中。验证：ssh -T git@github.com （b）本地hexo部署到github根目录下的congfig文件中加上：deploy: type: git repo: git@github.com:4o4NotFoundd/4o4NotFoundd.github.io.git branch: master #使用git@方式，每次从hexo向github部署的时候不用重复输入密码[注意：]一定要使用git@，别用http协议的，不然每次部署时输入username和password能气死，来自http用户的血泪教训。config配置完了，记得操作：hexo c 清理hexo g 如果有报错，修改后继续hexo c, hexo ghexo d此处使用hexo deploy(部署，提交到github) （c）购买域名,在域名中添加解析到（b）这里，在浏览器里输入https://你的用户名.github.io已经可以看到网站了，但是，这个网址不大好看啊，自己申请一个简单好记的域名岂不美滋滋？于是，在万网找到”域名优惠”字样，发现了新大陆，一块钱域名，不亏了吧，其他9元，19都有，看个人。进入到控制台，添加解析如下：红圈里的是github的解析，上面两个是添加到百度站点（添加之后百度就会爬你的网页，别人搜东西就会把你的推荐给人家，不然别人一直看不到你的博客，具体搜SEO）github的记录值哪来的？ 在你的本机ping https://4o4NotFoundd.github.io 就出来了，这个ip就是“服务器A”的ip。对了，在购买域名的时候还有身份认证，有一个快捷的方法，用淘宝或支付宝这样的认证很快，不然你得几个工作日。 （d）不出意外，当你在浏览器里输入域名，就能看到你的网站了！！！开不开心？？这是第2步!!! 五、开始写第一个博客两种方法：hexo-admin 和 自选编辑器（我用的webstorm，sublime text3也可以）,两种都是编辑markdown（.md）格式的文档。（1）hexo-admin使用过程：npm install --save hexo-adminhexo s在浏览器里输入localhost:4000/admin进入到编辑页面，对新手友好一些。（2）自己用编辑器写（推荐）主要是写.md文件，hexo会把.md文件转成html页面，博主只需要关注内容就好，不用太关心页面布局。在/myblog/source/_posts文件夹下的md文件会最终展示在博客上，，所以可以直接在里面新建filename.md文件来测试，格式如下 title: Vue.js之vuex入门 author: He Zhaoxiang id: learn-vuex tags: - Vuex categories: - web前端 - Vue学习 date: 2019-12-04 19:11:30 --- 虚线一下是正文 ![](https://图片链接.png) ## 一、这是一级目录 id是在链接里展示的内容 tags是文章的标签，在侧边栏能展示 categories 是menu菜单栏，分别是一级菜单“web前端”，二级下拉菜单“vue学习” 插入图片的格式就是上面那样，试一次就知道了。最后，hexo c， heox g -d部署到github，就成了~ 哈哈哈第3步get~ 有了以上三步，完全可以写博客了，那为什么还有下面4,5,6。。。步呢，当然是做的更好啦~##六、博客menu菜单栏、侧边展开定制1、menu菜单栏增加内容最方便的方式是通过category添加，在写.md的时候就自己确定了在哪个分类下，比较方便。所以，用好上面我给的模板，剩下的就是你自己的内容了。在category中不同一级菜单的顺序，是按字母和拼音的先后来的，不是依次向右排，也没有自己定制位置的方法，所以最好先自己规划好一级分类。侧边栏在hueman的config文件中是widgets，展示的内容自己选吧，相应的汉语意思在/hueman/languages/zh-CN.yml中这里是我设置情况：##七、字数统计、访问量统计、评论系统 百度和谷歌收录SEO1、字数统计在根目录下安装hexo-wordcount：npm install --save hexo-wordcountconfig中counter选择true，没错，就是这么简单，但是自己捣鼓就很费时间，多数博客都是基于NexT主题改的，hueman主题的博客比较少。2、访问量统计使用不蒜子,参考这位小哥需要一提的是小哥给的代码失效了，进入不蒜子那里直接获得最新代码，就两行代码，引用一下不蒜子的js就可以。3、评论系统,百度收录SEO评论使用来必力，百度收录也是参照这位小姐姐，需要“科学上网”，如果不能“科学上网（提示一下，现在蓝deng可以用，灯光的灯，github找找吧哈哈哈）”，那就得花些时间使用valine方法了。 到此，第四步finish！ 后续可以改的东西还很多，有很大的可定制性，先到这里，有问题可以Email我或者留言，看到会及时回复滴~ 欢迎经常来玩哦~","categories":[{"name":"Demo","slug":"Demo","permalink":"https://hezhaoxiang.work/categories/Demo/"},{"name":"搭建博客","slug":"Demo/搭建博客","permalink":"https://hezhaoxiang.work/categories/Demo/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"Demo","slug":"Demo","permalink":"https://hezhaoxiang.work/tags/Demo/"},{"name":"搭建博客","slug":"搭建博客","permalink":"https://hezhaoxiang.work/tags/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"}],"author":"He Zhaoxiang"},{"title":"Vue.js之vuex入门","slug":"Vue.js之vuex入门","date":"2019-12-04T11:11:30.000Z","updated":"2019-12-10T11:33:12.000Z","comments":true,"path":"2019/learn-vuex/","link":"","permalink":"https://hezhaoxiang.work/2019/learn-vuex/","excerpt":"","text":"放图，这个图最能说明vuex和Vue之间的关系。 一、原理虚线中的Vuex是用来处理vue的组件，vue compontents（组件）通过dispatch（理解为转发事件）交给action，通过接入后端api完成一些业务，在action中进行异步操作，再将结果以commit（提交事件）方式发给mutations。mutations中最终实现vue compontent的method。state用来存数据，交给组件在页面中显示。 devtools是vue为了适应浏览器的一个插件，在这个插件中可以看到vue响应的过程，包括每个对象，属性和value。 二、vuex组成1、state2、getter3、mutations4、actions5、modules 1. state 相当于数据仓库，vuex中的数据放在store实例中，store对象包括 s以上5个部分。store称为单一状态树：所有状态信息保存在一个store中，便于管理。 1const store= new Vuex.Store(&#123;2 state:&#123;3 //counter 数据变量4//保存数据，在其他地方引用$store.state.counter5 &#125;,&#125; 2. getter 用来获取数据，类似computed计算属性。 1getters:&#123;2 // adddd()&#123;3 // &#125;4//类似计算属性computed，使用时$store.getter.adddd&#125;56//filter过滤,s代表student数组中的一个，结果返回学生信息。7this.$store.state.student.filter(s =&gt;&#123; 8 Return s.age&gt;20&#125;)9等价于：10this.$store.student.filter(s=&gt; s.age&gt;=20) 11//前一个&gt;= 是过渡函数，filter格式，第二个&gt;=是判断条件1213more20(state)&#123;1415 &#125;,16 more20Length(state,getter)&#123;17 //调用getter中已有的函数getter.more20.length18 &#125;19 &#125;, 3. mutations 在mutations中，vue组件的method，commit给mutation，mutation来处理。 用来修改数据，包括两部分：事件类型type+回调函数；回调函数的参数被称为mutation的负载payload。 1两种提交风格：2 this.$store.commit(“appmethodTomutation”,count)3//此处事件类型appmethodTomutation，payload：count45//可以直接由vue.component--&gt;mutations，执行同步操作6//如果有异步操作，则需要vue.component--&gt;actions--&gt;mutations7 this.$store.commit(&#123;8type:” appmethodTomutation”, count &#125;) 响应式原理：界面刷新，state中的属性值跟着刷新。如果初始没有该属性，则不跟随响应。 添加属性:并跟随响应的方法push，pop，Vue.set（state.info,‘address’,’shandong’） 删除属性：Vue.delete(state.info,’age’) Miutation常量：将方法定义为常量，commit时写常量。 1//常量：2this.$store.commit(INCERES)3//在mutation中 使用4[INCRESE]&#123;方法 &#125; 5//还需要在mutation.js中单独定义6 export const INCRESE=‘increse’ 4.actions vue的method dispatch给action，actions 中commit 给 mutations，最终在mutation中解决。 action执行异步操作： （如setTimeout（（）=&gt;{ state.info.name=’xlkhj’ }, 1000），在mutation中都是同步操作。Context上下文，相当于store 5. modules store内容过多时可使用，将store的功能模块化，每个模块中又可以有state等。从module中的action取store中的值context.rootGetters。 三、在vue中使用vuex1Vue.use(Vuex)2//1、安装插件3//2、创建store对象4const store= new Vuex.Store56// 3、导出store对象：7export default store","categories":[{"name":"web前端","slug":"web前端","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"Vue学习","slug":"web前端/Vue学习","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/Vue%E5%AD%A6%E4%B9%A0/"},{"name":"Vuex","slug":"web前端/Vue学习/Vuex","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/Vue%E5%AD%A6%E4%B9%A0/Vuex/"}],"tags":[{"name":"Vuex","slug":"Vuex","permalink":"https://hezhaoxiang.work/tags/Vuex/"}],"author":"He Zhaoxiang"},{"title":"Vue.js小Demo--todoList待办事项清单","slug":"Vue小Demo--todoList待办事项清单","date":"2019-11-29T13:38:00.000Z","updated":"2019-12-10T12:34:06.000Z","comments":true,"path":"2019/learn-vue-todoList/","link":"","permalink":"https://hezhaoxiang.work/2019/learn-vue-todoList/","excerpt":"","text":"Vue实现todolist整体思路：1、创建vue项目（不包括router，不使用eslint检查语法）2、修改为空白项目，去掉helloworld等3、构思整体框架，创建一个DOM（标题appheader，输入栏input、展示列表list）通过css渲染4、依次完成各个组件AppHeader、todoInput、todoItem，最后由APP.vue组合展示。组件化思想是Vue的核心思想，将各个功能模块组件化，有利于在页面中引用。在每次刷新网页时，Vue的页面也是根据组件刷新，而不必刷新整个页面，提高了运行效率，节约网络资源。 一、标题部分–Appheader.vue每个vue组件都包含template、script和css的style样式，后两者可缺省或外部引用。script中的name将作为组件名在APP.vue中引用 1&lt;template&gt;2 &lt;div id=\"title\"&gt;3 &lt;h1&gt;番茄工作法todoList&lt;/h1&gt;4 &lt;/div&gt;5&lt;/template&gt;6&lt;script&gt;7 export default &#123;8 name: \"AppHeader\"9 &#125;10&lt;/script&gt;11&lt;style scoped&gt;12#title&#123;13 color: burlywood;14&#125;15&lt;/style&gt; app.vue引用情况（部分app.vue，最后给出整个app.vue） 1template中：2&lt;AppHeader&gt;&lt;/AppHeader&gt;3script中：4import AppHeader from \"./components/Appheader.vue\";5export defalt&#123;6name:\"APP\",7compponents:&#123;8AppHeader,9&#125;&#125;10//1、注意区分vue的文件名（Appheader）和组件名（AppHeader），在引用时：import 组件 from 文件；默认情况下二者一样，自己修改时应注意。11//2、在components（组件）中要引用AppHeader组件，否组无法使用； 二、输入框–todoInput.vue1&lt;template&gt;2 &lt;div id=\"input\"&gt;3 &lt;input id=\"inputtext\" type=\"text\" v-model=\"text\" v-on:keyup.enter=\"addTodo\" placeholder=\"输入事项，回车确定\"&gt;4 &lt;/div&gt;5 //监听enter，执行addTodo方法，6&lt;/template&gt;78&lt;script&gt;9 export default &#123;10 name: \"TodoInput\",11 data()&#123;12 return&#123;13 text:\"\"14 &#125;;15 &#125;,16 methods:&#123;17 addTodo()&#123;18 this.$emit(\"add-event\",this.text);19 //子组件上的点击事件成功后，通过 $emit 将事件add-event和数据text发送，20 //发送到add-event对应的method，在父组件APP.vue中对应add-event的方法是addTodo123，执行添加数据21 this.text=\"\";22 &#125;23 &#125;24 &#125;25&lt;/script&gt;2627&lt;style scoped&gt;28#inputtext&#123;29 outline:none;30 /*box-shadow: none;*/31 border: none;32 border-bottom: 2px solid lightskyblue;33 border-top: 2px solid lightskyblue;34 width: 400px;35 line-height: 30px;36 margin:20px auto 20px auto;37 padding: 5px;38&#125;39&lt;/style&gt; 三、显示增加的事项，删除事项–todoItem.vue1&lt;template&gt;2 &lt;div id=\"list\"&gt;3 &lt;button id=\"del-btn\" v-on:click=\"removeTodo\"&gt;删除&lt;/button&gt;&#123;&#123;x.text&#125;&#125;4 //点击button，执行removeTodo5 &lt;/div&gt;6&lt;/template&gt;78&lt;script&gt;9 export default &#123;10 name: \"TodoItem\",11 props:[\"x\"],//props属性，1213 methods:&#123;14 removeTodo()&#123;15 this.$emit(\"remove-event\",this.x.id);16 //子组件执行removeTodo，通过emit发送remove-event事件和id给父组件app17 //在父组件中根据remove-event执行removeTodo321方法18 &#125;19 &#125;20 &#125;21&lt;/script&gt;2223&lt;style scoped&gt;24#list&#123;25 /*float: left;*/26 width: 400px;27 margin: 10px auto 10px auto;28 padding-right: 10px;29 border-bottom: 1px solid lightgray;30 text-align: left;31 line-height: 30px;32 font-weight: bold;33&#125;34#del-btn&#123;35 border: 2px solid grey;36 line-height: 18px;37 background-color: white;38 color: red;39 margin-right: 10px;40&#125;41&lt;/style&gt; 四、完整父组件APP.vue1&lt;template&gt;2 &lt;div id=\"app\"&gt;3 &lt;div id=\"todo-wrapper\"&gt;4 &lt;AaappHeader&gt;&lt;/AaappHeader&gt;5 &lt;TodoInput v-on:add-event=\"addTodo123\"&gt;&lt;/TodoInput&gt;6 &lt;TodoItem v-for=\"x in todos\" v-on:remove-event=\"removeTodo321\" v-bind:x=\"x\" :key=\"x.id\"&gt;&lt;/TodoItem&gt;7 //v-for循环，展示现在data中的事项，和key配合使用8 //v-bind绑定数据，在子组中要定义props属性9 &lt;/div&gt;10 &lt;/div&gt;11&lt;/template&gt;1213&lt;script&gt;14import AaappHeader from \"./components/Appheader.vue\";15import TodoInput from \"./components/todoInput.vue\";16import TodoItem from \"./components/todoItem.vue\";17export default &#123;18 name: 'app',19 components: &#123;20 AaappHeader,21 TodoInput,22 TodoItem2324 &#125;,25 data()&#123;26 return&#123;27 todos:[28 &#123;id:0, text:\"事项0\"&#125;,29 &#123;id:1, text:\"事项1\"&#125;30 ],31 nextId:2,32 &#125;;33 &#125;,34 methods:&#123;35 addTodo123(text)&#123;36 this.todos.push(&#123;id:this.nextId,text:text&#125;)37 this.nextId++;38 &#125;,39 removeTodo321(id)&#123;40 this.todos=this.todos.filter(x=&gt;x.id!==id)41 &#125;42 &#125;43&#125;44&lt;/script&gt;4546&lt;style&gt;47#app &#123;48 font-family: 'Avenir', Helvetica, Arial, sans-serif;49 -webkit-font-smoothing: antialiased;50 -moz-osx-font-smoothing: grayscale;51 text-align: center;52 color: #2c3e50;53 margin-top: 60px;54&#125;55#todo-wrapper&#123;56 width: 600px;57 min-height: 600px;58 margin: 100px auto 100px auto;59 border: 3px solid lightskyblue;60&#125;61&lt;/style&gt; 注：学习链接，b站上的一个外国小哥写的demo，全程飚英文，跟着敲，然后自己修改。侵删。代码放在github上（下载可直接用）：https://github.com/4o4NotFoundd/Vue/tree/master/todoList todoList","categories":[{"name":"Demo","slug":"Demo","permalink":"https://hezhaoxiang.work/categories/Demo/"},{"name":"todoList","slug":"Demo/todoList","permalink":"https://hezhaoxiang.work/categories/Demo/todoList/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://hezhaoxiang.work/tags/Vue/"},{"name":"Demo","slug":"Demo","permalink":"https://hezhaoxiang.work/tags/Demo/"}],"author":"He Zhaoxiang"},{"title":"2019年“华为杯”研究生数学建模竞赛--E题（全球变暖）思路&感想","slug":"2019年“华为杯”研究生数学建模竞赛--E题（全球变暖）思路&感想","date":"2019-11-13T06:53:00.000Z","updated":"2019-12-10T11:46:38.000Z","comments":true,"path":"2019/huawei-jianmo/","link":"","permalink":"https://hezhaoxiang.work/2019/huawei-jianmo/","excerpt":"","text":"11月11日，公布成绩得了二等，欣喜若狂，毕竟三个人建模经历并不丰富。在此，首先感谢两位厉害的小姐姐一起交流、合作、查资料、编程、统计作图、合作分工、熬夜，才最后完成了论文。不论最后的结果如何，每个人的付出都是大于三分之一的。 目录一、研一参加数模情况二、研二开始前的准备三、比赛过程（周四~周一上午，四天四夜）四、注意事项 一、研一参加数模情况 研一刚开学的时候，导员在年级大会上就说起了“华为杯”研究生数学建模，现在对这项比赛比较认可吧，一般当成研究生数学建模的国赛。本科期间对数学建模了解的并不是很多，没有系统的学习过各种模型，参加过一次美赛，无果。研一当时作为队长找了一位室友和一位经济类专业的小姐姐，在开赛前的前一周，我们一起练了两套题，交流了方法，室友（编程大佬）实现了部分内容，当时主要练了飞行轨迹最优化、遗传相关这两个方面，准备比赛时从这两方面入手。 正式比赛时，在第一天的上午我们就确定了要做E题–“多无人机对组网雷达的协同干扰”，随着理解一点点深入，发现E题看似入门容易，但是做起来并不简单，不过已经过去一两天，改题目也来不及了，就硬着头皮做下去。当时前三天都是在图书馆里，早上八点到，晚上十点回，中午不睡也无困意，毕竟思路像一条条绳索把自己的全身缚住，动弹不得。最后，我们把问题简化，忽略了很多干扰因素，以最简单的方式解决。 最后一天的夜里，我们转战学校提供的教室，三人通宵赶论文。解决方式简化，导致论文里的内容也少，写到最后没有太多东西可写。不过还是尽可能加一些图表，丰富一下内容。在夜里十二点半左右，点了外卖，吃完接着干。大概在夜里三四点，觉得整体内容基本完成，在早上六点多，提交了论文的MD5码（重要，后面着重说明），踏着清晨的曙光，奔向食堂，吃了早饭就回宿舍躺着了。 最后结果并不理想，只能说自己经验和知识储备不足吧。室友和那个小姐姐都很认真的准备，作为队长没有给队员一个好结果，也挺遗憾的。 二、研二开始前的准备1、阅读优秀论文自己看一遍往年的建模题目，自己思考，然后去读优秀论文真的挺重要。每个类型的题目看四五篇左右，看论文里的建模方法就去查，关于这个方法的思路，如何实现。这样再看到一个新的题目自己也就有想法了。特别是对同一个题目，看几篇论文，他们用了不同的方法实现，其实也说明了建模的开放性，自己在做题的时候思路要开阔。优秀论文去官网上找吧，资源还是挺多的。 2、三人交流不可否认，三个人之间的交流、合作真的很重要。这次队长是一位小姐姐W，另一位队友小姐姐J。队长W和我主要负责建模和编程，小姐姐J主要负责写论文，作统计图表，查资料、提供思路和修正我们的思路。 3、开始的前一天–2019年9月18号周三去超市买了饼干，面包，咖啡备用，准备好论文模板和几篇格式较好的论文，参照他们的格式来写。我们三人在同一个专业，这几天都在实验室进行，队友J和老板请了假，我实验室在队长W隔壁，就趁着老板不在悄悄过去。 三、比赛过程（周四~周一上午，四天四夜）1、第一天：9月19号-周四第一天上午拿到题目，我们三人分开看题目，看完交流想法和难度，然后每个人把其他题目看一下，再决定选哪一道题。 A题：无线智能传播模型 B题：天文导航中的星图识别 C题： 视觉情报信息分析 D题：汽车行驶工况构建 E题：全球变暖？ F题：多约束条件下飞行器航迹快速规划 A题华为题，前几年都是信号模型一类，今年有所变化，在信号这些理论基础上，改为深度学习，在华为云上跑深度模型，以分类那些为主，不适合我们三人，作罢。B题看完整个人有点懵，各种运动把我们绕晕了，也没深入考虑，pass。C题是cv方向，根据图像测车辆之间的实际距离，基本上是纯算法题，pass。D题仔细读一读感觉不难，留作备选，在最后三人讨论中觉得E题更好写，答案更开放。E题四小问都很开放，在中午饭前就决定选E。F题也是规划相关，吸取去年经验没选，后来听室友说选了这题，做起来像是高中物理题，最后他们也得了国二。 这是E题： （1）你们能否从加拿大各地天气变化的历史数据中挖掘出该地区温度的时空变化趋势？海洋表面温度历史数据中蕴含着什么样的规律？ （2）请你们建立一个刻画气候变化的模型对未来 25 年的气候变化进行预测，该模型至少需要考虑地球的吸热、散热以及海洋的温度变化【7】 等要素。 （3）“极寒天气”是某地的天气现象，这种极端气象的出现，与气候变化有无关系？请建立相应的模型，并利用题目所提供的数据以及你能收集的数据说明：全球变暖和局地极寒现象的出现之间是否矛盾？ （4）请用通俗易懂的文字解释：“全球变暖了，某地今年的冬天特别冷”之间的关系。 请用一个新概念替代“全球变暖”，来反映气候变化的趋势和复杂性？并给予解释。 第一天下午，所有的E题群里基本上都在问同一个问题，数据在哪里，到了晚上群里逐渐有人发网站链接，最后我们在加拿大的官网上找到了气象站的温度数据。气象站温度数据很多很多，而且年份不齐，有的还是缺省，我们就决定按照省份和方位来选点，并在气象站位置地图上标注。选点后下载数据，十点余回宿舍。 2、第二天：9月20号-周五上午，在知网上搜了几篇论文看他们是对温度数据如何处理的，做了参考。然后对温度数据选择，筛选，统计，作图。（1）的前一小问基本完成，论文未写。跟着第一天的思路来找，在各种网站之间来回穿梭，也找到了一个统计全球海洋表面温度的网站，队友J对这个网站的数据结果做了整理，中午她开始写（1）问的论文，队长W编程来统计，我开始看第二问。下午和晚上，我先找到了几篇内容贴切的论文，准备改用他们的方法，队长W在github上找到了类似的代码，不过调试还有问题，跑不通，最终作罢。时间过的很快，查资料，交流方法，不知不觉间就到了晚上，今天大家交流明显变少，查资料的效率也高很多，在第一天的时候三个人思想碰撞最为热烈，思路一旦敲定，大家就分工各自完成自己的部分。 3、第三天：9月21号-周六周六一早上开始有些焦灼，（2）问还没完成，还有（3）（4）问。我就主要负责（2）问，开始写（2）的论文，队长W开始看（3）问，队友J把（1）问完善的差不多了。下午，根据论文和博客上的方法，我对SDSM（统计降尺度模型）进行改进，对常见的气候模型做了统计和整合，并对RCP（气体浓度路径 ，当时记得贼6，脑子里全是这几个词，现在都忘了哈哈哈）建立子模型。晚上通宵，在周日凌晨三点左右把（2）问写完了，然后跟着队长看（3）问。两位队友小姐姐很拼，硬是通宵一点儿没睡，我四点多开始睡了两个小时。 4、第四天：9月22号-周日七点左右，我去买了早餐。饭后，关于（3）问我和队长有了分歧，队友J和我想法相似，不过我俩都没能说服队长，最后队长一人完成（3），我和队友J继续做（4）。（4）问是开放性的，开始是队友J在写，然后我作修改。（4）的给全球变暖提一个新概念，队友J提出的“全球生态环境紊乱”我感觉挺好，气候变暖不仅仅是温度提高，对应的生态环境也发生变化，涉及到各个方面，具体表现形式可分为海平面上升、影响农业、臭氧层破坏、土地荒漠化以及大气污染与海洋污染等方面。第四天晚上，（1）、（2）（4）问基本完成，剩下的时间就是继续修改、完善。（3）问队长持续fighting。 5、第五天：9月23号-周一此处的周一是要从零点开始算了，这段时间显得格外宝贵。队长在凌晨五点左右完成（3），然后我们一起调格式，论文从头到尾看了几遍（论文修改三五遍都是很正常的，尽量美观），改改格式，加上参考文献、代码和数据。说实话，这个时候我们三个人都已经脑袋懵了，眼睛睁着但是脑袋转的很慢。九点左右，队长提交了MD5码，她俩各自回宿舍了。交MD5码的那一刻，整个人真的有一种大石头落地的感觉，不管论文有多少不足之处，都不用再改，长舒一口气，能睡觉真好！！中午十二点多，提交了论文原文和数据压缩包，一切结束！ 四、注意事项1、MD5码用软件生成MD5码之后，论文一定不要动，不要打开，不要重命名，路径最好也不要动。防止码和论文对应不上。我们学校每年都有因为MD5码问题没交上论文的情况。这是我们学校参加建模的情况，大佬还是多啊，作为菜鸡唯有佩服。2、三人之间交流合作交流，真的真的太重要了，三个人分好工，会节省很多时间，别人几句话可能就解决了你想一两个小时的问题。还有，交流的时候不要怕意见不合，说出来总比自己一个人闷头苦干的好。 3、摘要&amp;格式摘要一定写的简洁干练，把你的思想方法和结果用几句话说出来，摘要里别说空话。我们是每个人写自己负责的那部分。如果仔细追究，其中不当之处可能很多，不过这也是我们三人在这四天四夜里展现最好的了。)4、建模宣讲会的时候老师讲：参加数学建模，95%的学生都不是数学专业的，重在思路，重在解决问题的方法（所以，不会建模不要紧，三个人一起查资料，想办法）。而评阅的老师，95%都是数学专业的（所以论文很重要，要写的完善，让人看起来舒服，我们都是尽量用流程图，图表代替大段的文字描述）。最后，说两点最重要的吧——论文写好，三人合作","categories":[{"name":"竞赛","slug":"竞赛","permalink":"https://hezhaoxiang.work/categories/%E7%AB%9E%E8%B5%9B/"},{"name":"数学建模","slug":"竞赛/数学建模","permalink":"https://hezhaoxiang.work/categories/%E7%AB%9E%E8%B5%9B/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"}],"tags":[{"name":"数学建模","slug":"数学建模","permalink":"https://hezhaoxiang.work/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"},{"name":"2019研究生E题","slug":"2019研究生E题","permalink":"https://hezhaoxiang.work/tags/2019%E7%A0%94%E7%A9%B6%E7%94%9FE%E9%A2%98/"}],"author":"He Zhaoxiang"},{"title":"Vue入门&注意事项","slug":"Vue入门&注意事项","date":"2019-11-01T13:06:00.000Z","updated":"2019-12-10T11:33:12.000Z","comments":true,"path":"2019/learn-vue01/","link":"","permalink":"https://hezhaoxiang.work/2019/learn-vue01/","excerpt":"","text":"一、简介 vue是前端开发中交为常用的框架， vue-cli是vue的脚手架工具，具有所占内存少、开发高效等特点，简单说vue-cli使得vue开发更简单。 cli：command-line-interface命令行界面（字符用户界面） 二、安装环境及创建项目 1、安装环境 npm：node package manager，node的包管理器。推荐使用淘宝镜像来安装npm，官方网速太慢。1npm install -gd express --registry=http://registry.npm.taobao.org2npm install -g cnpm --registry=https://registry.npm.taobao.org 2、创建项目 创建vue-cli2 1vue init webpack 项目名字 #创建vue-cli2的项目:2npm run dev #每次启动VUE服务器 创建vue-cli3 1vue create 项目名字 #创建2vue run serve #运行 二者区别：cli3中取消了webpack，框架结构更简单，推荐使用cli3。 注意：创建vue项目时先不要选择eslint！真的费事！！eslint是用于校验js语法，js写的不规范一直警告报错,修改过package.json，仍然无果，最后重建项目；每次打开vue项目时在cmd中进入到相应文件夹中，运行 vue run serve即可，在浏览器中可查看。一般地址为localhost:8080 ##三、报错及解决This dependency was not found:* app.js?vue&amp;type=script&amp;lang=js&amp; in ./src/App.vueTo install it, you can run: npm install –save app.js?vue&amp;type=script&amp;lang=js&amp; 可能报错原因1、在APP.vue中需要引入app.js文件，但是无法找到该文件此时应当考虑js文件引入的路径是否正确，我在这个问题上找了老半天，就是因为路径问题；报错时：在App.vue中是这样的 1&lt;script src=\"app.js\"&gt;&lt;/script&gt; 修改后：是这样的（./ 之差） 1&lt;script src=\"./app.js\"&gt;&lt;/script&gt; 2、在app.js中需要引入其他vue文件在项目重启后，app.js找不到当时引用的vue文件了，可能是在项目重启后引用 的vue文件默认为和app.js同一路径，此时需要修改vue的文件路径，重新import修改前： 1import AppHeader from \"./components/AppHeader\"; 修改后： 1import AppHeader from \"./components/AppHeader.vue\";","categories":[{"name":"web前端","slug":"web前端","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"Vue学习","slug":"web前端/Vue学习","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/Vue%E5%AD%A6%E4%B9%A0/"},{"name":"Vue","slug":"web前端/Vue学习/Vue","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/Vue%E5%AD%A6%E4%B9%A0/Vue/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://hezhaoxiang.work/tags/Vue/"}],"author":"He Zhaoxiang"},{"title":"web--2048小游戏复现（慕课网）","slug":"web--2048小游戏复现（慕课网）","date":"2019-11-01T13:06:00.000Z","updated":"2020-09-07T19:02:09.325Z","comments":true,"path":"2019/howtodo-2048demo/","link":"","permalink":"https://hezhaoxiang.work/2019/howtodo-2048demo/","excerpt":"","text":"这周断断续续完成了2048小游戏的网页版，这里主要讲这款游戏的逻辑和代码实现。参考：慕课网2048私人订制 https://www.imooc.com/learn/76对着视频把源码敲了一遍，这里作一个思路整理。 一、整体思路1、游戏页面结构及样式2、2048游戏逻辑3、手机端优化思路可以划分为上三步，在第一步中，首先规划好整体的排版。 页面内容包括2048header、游戏开始button、得分字段、整个4*4方格grid-container。在container中每一个cell后期都要绑定一个number。 二、游戏页面结构及样式2048，开始、得分设置text-align：center；margin左右auto居中，字体背景颜色等； 1&lt;header&gt;2 &lt;h1&gt;2048&lt;/h1&gt;3 &lt;a href=\"javascrpit:newgame();\"&gt;开始&lt;/a&gt;4 &lt;p&gt;得分&lt;/p&gt;5&lt;/header&gt; 4*4方格,盒子模型 1&lt;div id=\"grid-container\"&gt;2 &lt;div id=\"grid-cell-0-0&gt;3 &lt;/div&gt;4&lt;/div&gt;5//grid-cell-0-0到3-3 container设置width、height、background，bord-radius边框，padding，margin、position（relative相对定位，相当于浮动）grid-cell设置width，height、background-color、position（absolute绝对定位，可以被覆盖）number-cell覆盖每个grid-cell，，其中的数字为border-number，初使为0 三、2048游戏逻辑1、newgame包括：init初始化游戏，生成gridcell4*4，number-cell清零，随机两个位置，generateOneNumber两次。（0）生成页面结构后，加载DOM（文档对象模型）。通过$(document).ready()完成，ready事件在生成html标签、元素，显示CSS样式后实现。在ready（）事件中执行newgame函数，该函数链接到《开始》按钮。（1）init：通过类选择器number-cell $（.number-cell).remove()清零，对grid-container中添加number-cell，number-cell中的数字都存在board【】【】二维数组中。（2）generateOneNumber中随机生成两个位置，和随机2或4，board[randx][randy]=randNumber; 2、moveLeft、moveRight、moveUp、moveDown键盘操作。moveLeft发生，所有数字左移，相同数字求和。（0）按下键盘的↑↓←→由$(document).keydown(）监听，通过switch–case决定运行moveLeft还是moveRight。（1）！！！！！重点来了！moveLeft发生，所有数字左移。两重for循环让每一个board[i][j]都左移（最左侧一列不能移动）移动的前提是board[i][j]！=0，board[i][k]！=0&amp;&amp;在左移的这段（k~j）距离，不能有阻挡（canMoveLeft）。（2）if 新位置为0，替换，elseif 新位置与board[i][j]相等，即相加。（3）向右，上、下思路一样，判断移动的这段距离无阻挡，然后相加或替换。3、绑定分数，定义score变量，当board[i][k] +=board[i][j]时，score+=board[i][k]；“得分”的id标签为score，通过选择器$(‘#score’).text(score)使得在得分：0处显示分数。4、game over，判断所有border-number不为零（没有空格），且canMoveLeft等四个函数return false（不能移动）。 四、手机端优化（0）在手机上与pc端的主要区别：页面大小、控制方式（按键盘和触控）（1）为了适应手机和pc，加一个获取屏幕大小的函数documentWidth=window.screen.availWidth,if 屏幕宽度大于500像素，认为是PC，grid-container按500像素显示，小于500，按手机来自适应。width和height按%百分比显示。（2）触控用document.addEventListener监听，包括touchstart、touchmove和touchend。（3）touchstart获取手指初始位置；touchmove是优化，使得手指点击无效；touchend获取手指离开屏幕的位置，通过xy坐标和滑动产生的位移来判断，执行moveLeft等上下左右四个函数。 注：bug修改在一排四个格子出现2248这样的情况下，左移结果应该是4480，但是在三、2、（2）中，结果是16000，应该添加hasConflicted二维数组，判断是否加过，保证只加一次。最后，附上慕课中给的源代码，仅作少量修改，侵删整体结构：index.html 1&lt;!DOCTYPE html&gt;2&lt;html lang=\"en\"&gt;3&lt;head&gt;4 &lt;meta charset=\"UTF-8\"&gt;5 &lt;meta name=\"viewport\"6 content=\"7 width=device_value,8 height=device_value,9 initial-scale=1.0,10 minimum-scale=0.9,11 maxmum-scale=1.0,12&lt;!-- //用户可以缩小或放大屏幕尺寸的最小最大值--&gt;13 user-scalable = yes\"14 /&gt;1516 &lt;title&gt;Title&lt;/title&gt;17 &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"2048.css\"&gt;18&lt;!-- &lt;script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-3.3.1.min.js\"&gt;&lt;/script&gt;--&gt;19&lt;!-- &lt;script type=\"text/javascript\" src=\"http://libs.baidu.com/jquery/1.9.0/jquery.min.js\"&gt;&lt;/script&gt;--&gt;20 &lt;script type=\"text/javascript\" src=\"jquery.min.js\"&gt;&lt;/script&gt;21 &lt;script type=\"text/javascript\" src=\"main2048.js\"&gt;&lt;/script&gt;22 &lt;script type=\"text/javascript\" src=\"showanimation.js\"&gt;&lt;/script&gt;23 &lt;script type=\"text/javascript\" src=\"support2048.js\"&gt;&lt;/script&gt;24&lt;/head&gt;25&lt;body&gt;26 &lt;header&gt;27 &lt;h1&gt;2048&lt;/h1&gt;28 &lt;a href=\"javascript:newgame();\" id=\"newgamebutton\"&gt;开始&lt;/a&gt;29 &lt;p&gt;得分: &lt;span id=\"score\"&gt;0&lt;/span&gt; &lt;/p&gt;30 &lt;/header&gt;3132 &lt;div id=\"grid-container\"&gt;33 &lt;div class=\"grid-cell\" id=\"grid-cell-0-0\"&gt;&lt;/div&gt;34 &lt;div class=\"grid-cell\" id=\"grid-cell-0-1\"&gt;&lt;/div&gt;35 &lt;div class=\"grid-cell\" id=\"grid-cell-0-2\"&gt;&lt;/div&gt;36 &lt;div class=\"grid-cell\" id=\"grid-cell-0-3\"&gt;&lt;/div&gt;3738 &lt;div class=\"grid-cell\" id=\"grid-cell-1-0\"&gt;&lt;/div&gt;39 &lt;div class=\"grid-cell\" id=\"grid-cell-1-1\"&gt;&lt;/div&gt;40 &lt;div class=\"grid-cell\" id=\"grid-cell-1-2\"&gt;&lt;/div&gt;41 &lt;div class=\"grid-cell\" id=\"grid-cell-1-3\"&gt;&lt;/div&gt;4243 &lt;div class=\"grid-cell\" id=\"grid-cell-2-0\"&gt;&lt;/div&gt;44 &lt;div class=\"grid-cell\" id=\"grid-cell-2-1\"&gt;&lt;/div&gt;45 &lt;div class=\"grid-cell\" id=\"grid-cell-2-2\"&gt;&lt;/div&gt;46 &lt;div class=\"grid-cell\" id=\"grid-cell-2-3\"&gt;&lt;/div&gt;4748 &lt;div class=\"grid-cell\" id=\"grid-cell-3-0\"&gt;&lt;/div&gt;49 &lt;div class=\"grid-cell\" id=\"grid-cell-3-1\"&gt;&lt;/div&gt;50 &lt;div class=\"grid-cell\" id=\"grid-cell-3-2\"&gt;&lt;/div&gt;51 &lt;div class=\"grid-cell\" id=\"grid-cell-3-3\"&gt;&lt;/div&gt;525354 &lt;/div&gt;55&lt;/body&gt;56&lt;/html&gt;57&lt;!--MVC结构：Model模型、visual界面UI、Control逻辑控制--&gt;5859&lt;!--待优化：--&gt;60&lt;!--1、game over--&gt;61&lt;!--2、最高得分--&gt;62&lt;!--3、加分动画--&gt;63&lt;!--可以通过phoneGap将web APP转换为native app--&gt;64&lt;!--网站发布：dropBox&amp;dropPages--&gt;65&lt;!--或者发布方式：nginx+花生壳，存在nginx中即可。--&gt; 2048.css 1header&#123;2 display: block;3 margin: 0 auto;4 width:100%;5 text-align: center;6&#125;7header h1&#123;8 font-family: Arial;9 font-size: 40px;10 font-weight:bold ;11&#125;12header #newgamebutton&#123;13 display: block;14 margin: 20px auto;15 width: 100px;16 padding:10px 10px;17 /*background-color: #9efff4;*/18 background-color: chocolate;19 font-family: Arial;20 color: white;21 border-radius: 10px;22 text-decoration: none;23&#125;24header #newgamebutton:hover&#123;25 background-color: cyan;26&#125;2728header p&#123;29 font-family:Arial;30 font-size: 25px;31 margin: 20px auto;32&#125;3334#grid-container&#123;35 width:460px;36 height: 460px;37 padding:20px;38 /*上下左右各自向外20px，盒子为500*500*/3940 margin: 50px auto;41 /*background-color: #bbada0;*/42 background-color: #9efff4;43 background-color: rgba(22,27,255,0.9);44 border-radius: 10px;45 position: relative;4647&#125;48.grid-cell&#123;49 width: 100px;50 height: 100px;51 border-radius: 6px;52 /*background-color: #ccc0b3;*/53 background-color: yellowgreen;54 position: absolute;55&#125;56.number-cell&#123;57 border-radius:6px;58 font-family: Arial;59 font-size: 60px;60 font-weight: bold;61 font-height:100px;62 text-align:center;6364 position:absolute;65&#125; main2048.js 1var board = new Array();2var score =0;3var hasConflicted = new Array();4//用于判断每个小格子是否发生了变化5//游戏初始化---------------------------------6$(document).ready(function()&#123;7 prepareForMobile();8 newgame();9&#125;);10function prepareForMobile() &#123;11 if( documentWidth &gt; 500 )&#123;12 gridContainerWidth = 500;13 cellSpace = 20;14 cellSideLength = 100;15 &#125;16 $('#grid-container').css('width',gridContainerWidth-2*cellSpace);17 $('#grid-container').css('height',gridContainerWidth-2*cellSpace);18 $('#grid-container').css('padding',cellSpace);19 $('#grid-container').css('border-radius',0.02*gridContainerWidth)2021 $('.grid-cell').css('width',cellSideLength);22 $('.grid-cell').css('height',cellSideLength);23 $('.grid-cell').css('border-radius',0.02*cellSideLength);2425 26&#125;27function newgame() &#123;28 //初始化棋盘格29 init();30 //在随机两个格子生成数字31 generateOneNumber();32 generateOneNumber();3334&#125;35function init() &#123;36 for (var i=0; i&lt;4;i++)37 for (var j=0;j&lt;4;j++)&#123;38 var gridCell=$('#grid-cell-'+i+\"-\"+j);39 gridCell.css('top', getPosTop(i, j));40 gridCell.css('left', getPosLeft(i, j));41 //每个方格的位置由这两个函数决定，在support2048中42 &#125;4344 for(var i = 0;i&lt;4;i++)&#123;45 board[i]=new Array();46 hasConflicted[i] = new Array();47 for(var j=0;j&lt;4;j++)&#123;48 board[i][j]=0;49 hasConflicted[i][j]= false;50 &#125;51 &#125;52 updateBoardView();53 score = 0;54&#125;55function updateBoardView()&#123;56 $(\".number-cell\").remove();57 // 删除当前所有方格中的值58 for (var i=0;i&lt;4;i++)59 for (var j=0;j&lt;4;j++)&#123;60 $(\"#grid-container\").append('&lt;div class=\"number-cell\" id=\"number-cell-'+i+'-'+j+'\"&gt;&lt;/div&gt;');61 var theNumberCell = $('#number-cell-'+i+'-'+j);6263 if (board[i][j]==0)&#123;64 theNumberCell.css('width','0px');65 theNumberCell.css('height','0px');66 theNumberCell.css('top',getPosTop(i, j)+cellSideLength/2);67 theNumberCell.css('left',getPosLeft(i, j)+cellSideLength/2);68 &#125;else&#123;69 // 不为零时用number-cell代替gridcell70 theNumberCell.css('width',cellSideLength);71 theNumberCell.css('height',cellSideLength);72 theNumberCell.css('top',getPosTop(i, j));73 theNumberCell.css('left',getPosLeft(i, j));74 theNumberCell.css('background-color',getNumberBackgroudColor(board[i][j]));75 theNumberCell.css('color',getNumberColor(board[i][j]));76 // 背景色和前景色77 theNumberCell.text(board[i][j]);78 &#125;7980 hasConflicted[i][j]= false;81 &#125;82 $('.number-cell').css('line-height',cellSideLength+'px');83 $('.number-cell').css('font-size',0.6*cellSideLength+'px');8485&#125;86function generateOneNumber()&#123;//先随机找一个位置，再在这个位置上赋值87 if (nospace(board))88 return false;89 //随机一个位置90 var randx=parseInt(Math.floor(Math.random()*4));91 var randy=parseInt(Math.floor(Math.random()*4));92 //产生0-4直接的浮点数，floor向下取整0123,parseInt强制类型转换为int93 var time=0;9495 while(time&lt;30)&#123; //===========================================================不懂96 if (board[randx][randy]==0)97 break;98 randx=parseInt(Math.floor(Math.random()*4));99 randy=parseInt(Math.floor(Math.random()*4));100 time++;101 &#125;102 if(time&gt;30)&#123;103 for(var i=0;i&lt;4;i++)104 for(var j=0;j&lt;4;j++)105 if(board[i][j]==0)&#123;106 randx=i;107 randy=j;108 &#125;109 &#125;110 //随机一个数字2,4111 var randNumber = Math.random() &lt;0.5? 2:4;//随机数小于0.5为2，大于0.5为4112113 //显示114 board[randx][randy]=randNumber;115 showNumberWithAnimation(randx, randy, randNumber);116 return true;117&#125;118$(document).keydown(function (event) &#123;119 event.preventDefault();//阻挡按键本来会产生的效果，这里防止屏幕滚动条上下移动120 switch (event.keyCode) &#123;121 case 37: //left,向左移动，生成新的数，判断游戏是否结束122 if (moveLeft())&#123;123 setTimeout(\"generateOneNumber()\",200);124 setTimeout(\"isgameover();\",200);125 //设置延时，让alert有出现 的效果126 &#125;127 break;128 case 38://up129 if (moveUp())&#123;130 setTimeout(\"generateOneNumber()\",200);131 setTimeout(\"isgameover();\",200);132 &#125;133 break;134 case 39://right135 if (moveRight())&#123;136 setTimeout(\"generateOneNumber()\",200);137 setTimeout(\"isgameover();\",200);138 &#125;139 break;140 case 40://down141 if (moveDown())&#123;142 setTimeout(\"generateOneNumber()\",200);143 setTimeout(\"isgameover();\",200);144 &#125;145 break;146 default:147 break;148149 &#125;150&#125;)151document.addEventListener('touchstart',function (event) &#123;152 startx=event.touches[0].pageX;//event.touches获取多个手指触碰屏幕的信息【0】为一个手指153 starty=event.touches[0].pageY;154&#125;);155document.addEventListener('touchmove',function (event) &#123;156 event.preventDefault();157&#125;);158document.addEventListener('touchend',function (event) &#123;159 endx=event.changedTouches[0].pageX;160 endy=event.changedTouches[0].pageY;161 var deltax=endx-startx;162 var deltay=endy-starty;163164 if(Math.abs(deltax)&lt;0.3*documentWidth &amp;&amp; Math.abs(deltay)&lt;0.3*documentWidth)165 return;166 //x167 if(Math.abs(deltax)&gt;=Math.abs(deltay))&#123;168 if(deltax&gt;0)&#123;169 //向右170 if (moveRight())&#123;171 setTimeout(\"generateOneNumber()\",200);172 setTimeout(\"isgameover();\",200);173 &#125;174 &#125;else&#123;175 //向左176 if (moveLeft())&#123;177 setTimeout(\"generateOneNumber()\",200);178 setTimeout(\"isgameover();\",200);179 //设置延时，让alert有出现 的效果180 &#125;181 &#125;182183 &#125;184 else&#123;185 //y186 if(deltay&gt;0)&#123;187 //向下188 if (moveDown())&#123;189 setTimeout(\"generateOneNumber()\",200);190 setTimeout(\"isgameover();\",200);191 &#125;192 &#125;else&#123;193 //向上194 if (moveUp())&#123;195 setTimeout(\"generateOneNumber()\",200);196 setTimeout(\"isgameover();\",200);197 &#125;198 &#125;199 &#125;200&#125;);201function isgameover() &#123;202 if (nospace(board)&amp;&amp;nomove(board))&#123;203 gameover();204 &#125;205&#125;206function gameover() &#123;207 alert('Game Over');208&#125;209//--------------------------------------------------------Left-------------------------------------210function moveLeft() &#123;211 if (!canMoveLeft(board))&#123;212 return false;213 &#125;214 //moveLeft215 for (var i=0;i&lt;4;i++)216 for (var j=1;j&lt;4;j++)&#123;217 if (board[i][j]!=0)&#123;//不为0可以向左移动，移动要判断该行左侧是否空（或相等）且没有障碍物218 for (var k=0;k&lt;j;k++)&#123;219 if (board[i][k]==0&amp;&amp;noBlockHorizontal(i, k, j, board))&#123;220 //move221 showMoveAnimation(i, j,i, k);222 board[i][k]=board[i][j];223 board[i][j]=0;224 continue;225 &#125;226 else if (board[i][k]==board[i][j] &amp;&amp;noBlockHorizontal(i, k, j, board)&amp;&amp; !hasConflicted[i][k])&#123;227 // else if (board[i][k]==board[i][j] &amp;&amp;noBlockHorizontal(i, k, j, board))&#123;228 //hasConflicted[i][k]没变化过，即没有发生add229 //move230 showMoveAnimation(i, j,i, k);231 //add232 board[i][k] +=board[i][j];233 board[i][j]=0;234 score+=board[i][k];235 updateScore(score);236 hasConflicted[i][k]=true;//只add一次237 continue;238 &#125;239 &#125;240 &#125;241 &#125;242 setTimeout(\"updateBoardView()\",200);//设置更新在200ms后发生，move动画就可以显示243 return true;244&#125;245//--------------------------------------------------------Right-------------------------------------246247function moveRight()&#123;248 if( !canMoveRight( board ) )249 return false;250251 //moveRight252 for( var i = 0 ; i &lt; 4 ; i ++ )253 for( var j = 2 ; j &gt;= 0 ; j -- )&#123;254 if( board[i][j] != 0 )&#123;255 for( var k = 3 ; k &gt; j ; k -- )&#123;256257 if( board[i][k] == 0 &amp;&amp; noBlockHorizontal( i , j , k , board ) )&#123;258 showMoveAnimation( i , j , i , k );259 board[i][k] = board[i][j];260 board[i][j] = 0;261 continue;262 &#125;263 else if( board[i][k] == board[i][j] &amp;&amp; noBlockHorizontal( i , j , k , board )&amp;&amp; !hasConflicted[i][k] )&#123;264 // else if( board[i][k] == board[i][j] &amp;&amp; noBlockHorizontal( i , j , k , board ))&#123;265 showMoveAnimation( i , j , i , k);266 board[i][k] *= 2;267 board[i][j] = 0;268 score+=board[i][k];269 updateScore(score);270 hasConflicted[i][k]=true;271272 continue;273 &#125;274 &#125;275 &#125;276 &#125;277278 setTimeout(\"updateBoardView()\",200);279 return true;280&#125;281function moveUp() &#123;282 if (!canMoveUp(board))&#123;283 return false;284 &#125;285 //286 for(var j=0;j&lt;4;j++)287 for (var i=1;i&lt;4;i++)288 if (board[i][j]!=0)289 for (var k=0;k&lt;i;k++)290 if (board[k][j]==0 &amp;&amp; noBlockupdown(j, k, i, board)) &#123;291 //move292 showMoveAnimation(i, j, k, j);293 board[k][j] = board[i][j];294 board[i][j] = 0;295 continue;296 &#125;297 // else if (board[k][j]==board[i][j]&amp;&amp;noBlockupdown(j, k, i, board)&amp;&amp; !hasConflicted[k][j]) &#123;298 else if (board[k][j]==board[i][j]&amp;&amp;noBlockupdown(j, k, i, board)) &#123;299 //move300 showMoveAnimation(i,j, k, j);301302 //add303 board[k][j]+=board[i][j];304 board[i][j]=0;305 score+=board[k][j];306 updateScore(score);307 // hasConflicted[k][j]=true;308309 continue;310 &#125;311 setTimeout(\"updateBoardView()\",200);312 return true;313&#125;314function moveDown() &#123;315 if (!canMoveDown(board))&#123;316 return false;317 &#125;318 //319 for (var j=0;j&lt;4;j++)320 for (var i=2;i&gt;=0;i--)321 if(board[i][j]!=0)&#123;322 for (var k=3;k&gt;i;k--)323 if (board[k][j]==0&amp;&amp;noBlockupdown(j, i, k, board))&#123;324 //move325 showMoveAnimation(i, j, k, j);326 board[k][j]=board[i][j];327 board[i][j]=0;328 &#125;329 // else if (board[i][j]==board[k][j]&amp;&amp;noBlockupdown(j, i, k, board) &amp;&amp; !hasConflicted[k][j])&#123;330 else if (board[i][j]==board[k][j]&amp;&amp;noBlockupdown(j, i, k, board))&#123;331 //move,add332 showMoveAnimation(i, j, k, j)333 board[k][j]+=board[i][j];334 board[i][j]=0;335 score+=board[k][j];336 updateScore(score);337 // hasConflicted[k][j]=true;338339 &#125;340 &#125;341 setTimeout(\"updateBoardView()\",200);342 return true;343344&#125; support2048.js 1documentWidth=window.screen.availWidth;2gridContainerWidth=0.92*documentWidth;3cellSideLength=0.18*documentWidth;4cellSpace=0.04*documentWidth;56function getPosTop(i,j) &#123;7 return cellSpace + (cellSpace+cellSideLength)*i;8&#125;9function getPosLeft(i,j) &#123;10 return cellSpace + (cellSpace+cellSideLength)*j;1112&#125;1314function getNumberBackgroudColor(number) &#123;15 switch( number )&#123;16 case 2:return \"#eee4da\";break;17 case 4:return \"#ede0c8\";break;18 case 8:return \"#f2b179\";break;19 case 16:return \"#f59563\";break;20 case 32:return \"#f67c5f\";break;21 case 64:return \"#f65e3b\";break;22 case 128:return \"#edcf72\";break;23 case 256:return \"#edcc61\";break;24 case 512:return \"#9c0\";break;25 case 1024:return \"#33b5e5\";break;26 case 2048:return \"#09c\";break;27 case 4096:return \"#a6c\";break;28 case 8192:return \"#93c\";break;29 &#125;3031 return \"black\";32&#125;33function getNumberColor(number) &#123;34 if (number&lt;= 4)35 return \"#776e65\";36 return \"white\";37&#125;3839function nospace(board) &#123;40 for (var i=0;i&lt;4;i++)41 for (var j=0;j&lt;4;j++)42 if (board[i][j]==0)//默认初始值为0，为0说明还有空格43 return false;44 return true;45&#125;4647function noBlockHorizontal(row, col1,col2,board) &#123;48 for (var i=col1+1;i&lt;col2;i++)49 if (board[row][i]!=0)50 return false;51 return true;52&#125;53function noBlockupdown(col, row1,row2,board) &#123;54 for (var i=row1+1;i&lt;row2;i++)55 if (board[i][col]!=0)56 return false;57 return true;58&#125;59function canMoveLeft(board) &#123;60 for (var i=0;i&lt;4;i++)61 for (var j=1;j&lt;4;j++)&#123;62 if (board[i][j]!=0)//这个点不为0判断要向左移动63 if (board[i][j-1]==0 || board[i][j-1]==board[i][j])//左侧是空的或者左右相等64 return true;65 &#125;66 return false;67&#125;68function canMoveRight(board)&#123;69 for (var i=0;i&lt;4;i++)70 for (var j=2;j&gt;=0;j--)71 if (board[i][j]!=0)72 if (board[i][j+1]==board[i][j] || board[i][j+1]==0)73 return true;74 return false;75&#125;7677function canMoveUp(board)&#123;78 for (var j=0;j&lt;4;j++)79 for (var i=1;i&lt;4;i++)80 if (board[i][j]!=0)&#123;81 if (board[i-1][j]==0 || board[i][j]==board[i-1][j])&#123;82 return true;83 &#125;84 &#125;85 return false;86&#125;87function canMoveDown(board) &#123;88 for (var j=0;j&lt;4;j++)89 for (var i=2;i&gt;=0;i--)90 if(board[i][j]!=0)&#123;91 if (board[i+1][j]==board[i][j] || board[i+1][j]==0)&#123;92 return true;93 &#125;94 &#125;95 return false;96&#125;9798function nomove(board) &#123;99 if (canMoveLeft(board) || canMoveRight(board) || canMoveUp(board) || canMoveDown(board))&#123;100 return false;101 &#125;102 return true;103&#125; showanimation.js 移动的动画效果 1function showNumberWithAnimation(i, j, randNumber) &#123;2 var numberCell=$('#number-cell-'+i+\"-\"+j);34 numberCell.css('background-color', getNumberBackgroudColor(randNumber));5 numberCell.css('color', getNumberColor(randNumber));6 numberCell.text(randNumber);78 numberCell.animate(&#123;9 // animate函数是jQUERY中的动画函数,动画渐变50ms10 width:cellSideLength,11 height:cellSideLength,12 top:getPosTop(i, j),13 left:getPosLeft(i, j)14 &#125;,50);15&#125;16function showMoveAnimation(fromx, fromy,tox, toy)&#123;17 var numberCell = $('#number-cell-'+fromx+'-'+fromy);18 numberCell.animate(&#123;19 top:getPosTop(tox, toy),20 left:getPosLeft(tox, toy)2122 &#125;,200);23&#125;24function updateScore(score) &#123;25 $('#score').text(score);2627&#125;","categories":[{"name":"Demo","slug":"Demo","permalink":"https://hezhaoxiang.work/categories/Demo/"},{"name":"2048小游戏","slug":"Demo/2048小游戏","permalink":"https://hezhaoxiang.work/categories/Demo/2048%E5%B0%8F%E6%B8%B8%E6%88%8F/"}],"tags":[{"name":"Demo","slug":"Demo","permalink":"https://hezhaoxiang.work/tags/Demo/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://hezhaoxiang.work/tags/JavaScript/"}],"author":"He Zhaoxiang"},{"title":"web--JavaScript（四）jQuery","slug":"web-JavaScript（四）jQuery","date":"2019-10-22T11:48:00.000Z","updated":"2019-12-10T07:12:10.000Z","comments":true,"path":"2019/learnjs04-jquery/","link":"","permalink":"https://hezhaoxiang.work/2019/learnjs04-jquery/","excerpt":"","text":"(一)jquery 查找html元素的方式简单来说，jQuery是js的一个库，来完善js的功能。 查找html元素的方式：id、class、字段p、css四种jQuery用来处理浏览器不兼容，简化 HTML DOM 操作、事件处理、动画和 Ajax。在09年以后，多数jQuery的程序都可以用js直接写 （二）jquery与 html1、设置文本内容，对文本操作：myElement.text(“第n个文本”);设置html元素内容，对html的元素操作：myElement.html(第n个文本“”);2、获取内容获取文本 var myelement=$(“#id3”); var mytext=myelement.text(); $(“#demo”).text(mytext);获取html var content=my.html(); $(“demo”).html(content); （三）jquery与 css1、隐藏元素$(“#id1”).hide(); jquery方式my.style.display=”none”; CSS方式2、显示元素my.show();my.style.display=””;3、更改样式字体大小my.css(“font-size”,”35px”);my.style.fontSize=”35px”; （四）jquery与 DOM1、删除元素$(“#id”).remove();element.parentNode.removeChild(element);2、获取父元素var myParent = myElement.parent();var myParent = myElement.parentNode(); 1&lt;!DOCTYPE html&gt;2&lt;html lang=\"en\"&gt;3&lt;head&gt;4 &lt;meta charset=\"UTF-8\"&gt;5 &lt;title&gt;jQuery&lt;/title&gt;6 &lt;script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"&gt;&lt;/script&gt;7&lt;!-- 引用jquery库--&gt;8&lt;/head&gt;9&lt;body&gt;10&lt;p id=\"id1\"&gt;第1个文本p&lt;/p&gt;11&lt;p id=\"id2\"&gt;第2个文本p&lt;/p&gt;12&lt;p id=\"id3\"&gt;第3个文本p&lt;/p&gt;13&lt;p id=\"demo\"&gt;&lt;/p&gt;14&lt;script&gt;15 //var p1= document.getElementById(\"id1\");16 //document.getElementById(\"demo\").innerHTML = \"新文本：\"+p1.innerHTML;17 $(document).ready(function () &#123;18 var myElement=$(\"#id1\");19 // 通过id来查找元素20 var myElement2=$(\"p\");21 //通过字段p，或者通过类名.class122 //var myelement3=$(\"p.classp\")23 //通过css选择器方式查找，类名都定义为classp。24 $(\"#demo\").text(\"新文本：\" + myElement[2].innerHTML);25 // 显示输出26 &#125;);27&lt;/script&gt;28&lt;/body&gt;29&lt;/html&gt;","categories":[{"name":"web前端","slug":"web前端","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"web前端/JavaScript","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://hezhaoxiang.work/tags/JavaScript/"}],"author":"He Zhaoxiang"},{"title":"web前端--JavaScript（三）对象、函数、DOM&BOM","slug":"web-JavaScript（三）对象函数DOM等","date":"2019-10-21T11:36:00.000Z","updated":"2019-12-10T07:11:38.000Z","comments":true,"path":"2019/learnjs03-DOM/","link":"","permalink":"https://hezhaoxiang.work/2019/learnjs03-DOM/","excerpt":"","text":"根据上一篇博客思路，js从对象、函数、DOM和BOM再到jQuery入手。今天总结前三者，最后的DOM还没学完，再更。 一、js对象(一)js对象创建方法：1、使用对象文字–属性：值(最常用)2、使用关键词new3、对象构造器，创建构造类型的对象4、ECMAScript5中函数Object.create() （二）访问对象属性person.nameperson[“name”]x=name;person[x]person.nationality = “English”;添加属性delete person.age;删除属性和值（三）方法构造器函数，即在对象中，使用函数来创建属性language: function(){ return this.age}（四）对象访问器get和setget lang() {return this.language;} set先在对象中创建属性，值为空在对象外赋值language : “”,set lang(lang) {this.language = lang;};// 使用 setter 来设置对象属性：person.lang = “en”;（五）对象构造器先定义function函数作为对象构造器函数（一般函数名首字母大写），再创建对象的时候，调用function方法 function Person{}使用new来创建对象， bob=new Person{}; alice=new person{}注意：不能为已有的对象构造器添加新属性（报错undefined）；如需向构造器添加一个新属性，则必须把它添加到构造器函数，或者使用prototype，即Person.prototype.nationality = “English”;了解：ECMAScript添加或更改对象属性值Object.defineProperty(person, “year”, {value:”2008”}); 1&lt;!DOCTYPE html&gt;2&lt;html lang&#x3D;&quot;en&quot;&gt;3&lt;head&gt;4 &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;5 &lt;title&gt;Title&lt;&#x2F;title&gt;6&lt;&#x2F;head&gt;7&lt;body&gt;8&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;9&lt;script&gt;10 var person&#x3D;new Object();11 person.name &#x3D; &quot;bob&quot;;12 var person2 &#x3D; &#123;13 name:&quot;Alice&quot;,14 language:&quot;en&quot;,15 get lang () &#123;16 return this.language;17 &#125;18 &#125;1920 document.getElementById(&quot;demo&quot;).innerHTML&#x3D; &quot;His name is &quot;+person.name;21 &#x2F;&#x2F;document.write(&quot;His name is &quot;+person.name);2223 var obj &#x3D; &#123;24 counter : 0,25 get reset() &#123;26 this.counter &#x3D; 3;27 &#125;,28 get increment() &#123;29 this.counter++;30 &#125;,31 get decrement() &#123;32 this.counter--;33 &#125;,34 set add(value) &#123;35 this.counter +&#x3D; value;36 &#125;,37 set subtract(value) &#123;38 this.counter -&#x3D; value;39 &#125;40 &#125;;4142 &#x2F;&#x2F; 操作计数器：43 obj.reset;44 obj.add &#x3D; 5;45 obj.subtract &#x3D; 1;46 obj.increment;47 obj.decrement;48 document.getElementById(&quot;demo&quot;).innerHTML&#x3D;obj.counter;4950&lt;&#x2F;script&gt;5152&lt;&#x2F;body&gt;53&lt;&#x2F;html&gt; 二、函数(一)声明函数的几种方式：1、函数声明function myf{return ab；} 最常见，常用，结尾一般不加分号2、函数表达式，匿名函数 var myf= function(a,b){return ab}； 在结尾加分号3、Function() 构造器 通过new var myF = new Function(“a”, “b”, “return a * b”); 一般不用new4、箭头函数（ES6） const x=(x,y) =&gt;x*y; （二）函数参数函数不对参数进行检查如果调用参数时省略了参数（少于被声明的数量），则丢失的值被设置为：undefined。如果参数太多，使用argument来调用 （三）函数call()方法，使一个对象能调用另一个对象的方法var person = {fullName: function() {return this.firstName + “ “ + this.lastName;}};var person1 = {firstName:”Bill”,lastName: “Gates”,};person.fullName.call(person1); // 将返回 “Bill Gates” person的方法用于person1person.fullName.call(person1, “Seattle”, “USA”); call带的参数根据方法来 （四）apply（）方法同call，区别：apply带参数时以数组形式带person.fullName.apply(person1, [“Oslo”, “Norway”]);注：js中对数组没有max(),采用Math.max()闭包：嵌套函数中的子函数可以访问父函数的变量 ，子函数的变量相当于是私有的 三、DOM（文档对象模型）&amp;BOM（一）简介DOM文档对象模型，通过DOM，js能创建动态html。简单说，HTML DOM能增删改查HTML元素。DOM方法：在HTML上执行的动作，各种函数；DOM属性，改变元素的值。如getElementById方法，innerHTML属性。 （二）documentDOM文档对象，通过document的方法对元素增删改查。增：document.createElement(“demo2”)创建 HTML 元素document.appendChild(element) 添加 HTML 元素document.write(text) HTML 输出显示document.getElementById(id).onclick = function(){code} 向 onclick 事件添加事件处理程序删：document.removeChild(element) 删除 HTML 元素改：element.attribute = new value 改变 HTML 元素的属性值document.replaceChild(element) 替换 HTML 元素查：document.getElementById(id) 通过元素 id 来查找元素，（最常用）document.getElementsByTagName(name) 通过标签名来查找元素（a，p，h这些）document.getElementsByClassName(name) 通过类名来查找元素document.querySelectorAll(“p.class1”); 通过 CSS 选择器查找元素， （三）修改HTML元素document.write()，千万不要在文档加载后使用 document.write()，这么做会覆盖文档；document.getElementById(id).innerHTML = 新内容document.getElementById(id).attribute = 新值，如document.getElementById(“myImage”).src = “landscape.jpg”;document.getElementById(“p2”).style.color = “blue”; （四）事件onclick点击按钮，可以字体颜色变化等onmouseover和onmouseout：鼠标移到、移开该位置 1&lt;!DOCTYPE html&gt;2&lt;html lang&#x3D;&quot;en&quot;&gt;3&lt;head&gt;4 &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;5 &lt;title&gt;DOM&lt;&#x2F;title&gt;6 &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;7 #container&#123;8 width:400px;9 height: 400px;10 position: relative;11 background-color: darkcyan;12 &#125;13 #small&#123;14 width: 50px;15 height: 50px;16 position: absolute;17 background-color: coral;18 &#125;19 &lt;&#x2F;style&gt;20&lt;&#x2F;head&gt;21&lt;body&gt;22&lt;h1 id&#x3D;&quot;id1&quot;&gt;我是标题&lt;&#x2F;h1&gt;23&lt;button type&#x3D;&quot;button&quot; onclick&#x3D;document.getElementById(&quot;id1&quot;).style.color&#x3D;&quot;red&quot;&gt;点我变色&lt;&#x2F;button&gt;24&lt;button type&#x3D;&quot;button&quot; onclick&#x3D;&quot;move()&quot;&gt;点我移动&lt;&#x2F;button&gt;2526&lt;div id&#x3D;&quot;container&quot;&gt;27 &lt;div id&#x3D;&quot;small&quot;&gt;28 &lt;&#x2F;div&gt;29&lt;&#x2F;div&gt;30&lt;p id&#x3D;&quot;time1&quot;&gt;&lt;&#x2F;p&gt;31&lt;button type&#x3D;&quot;button&quot; onclick&#x3D;&quot;displayDate()&quot;&gt;点我显示时间&lt;&#x2F;button&gt;32&lt;script&gt;33 function move() &#123;34 var elem&#x3D;document.getElementById(&quot;small&quot;);35 var pos&#x3D;0;36 var id&#x3D;setInterval(frame, 5);37 function frame() &#123;38 if (pos &#x3D;&#x3D; 150)&#123;39 clearInterval(id);40 &#125;else&#123;41 pos++;42 elem.style.top &#x3D; pos+ &quot;px&quot;;43 elem.style.left &#x3D; pos+ &quot;px&quot;;44 &#125;45 &#125;46 &#125;47 function displayDate() &#123;48 document.getElementById(&quot;time1&quot;).innerHTML &#x3D; Date();49 &#125;5051&lt;&#x2F;script&gt;5253&lt;&#x2F;body&gt;54&lt;&#x2F;html&gt; （五）节点DOM中元素节点不包含文本教程 节点为title，教程要通过innerHTML访问var x= document.getElementById(“demo”).innerHTML;innerHTML=firstChild.nodeValue,childNodes[0].nodeValue第一个子节点对节点的操作：增删改查增：var element = document.getElementById(“div1”);element.appendChild(para);在div1中增加一个p节点element.insertBefore(para, child);在div中，前面插入一个p删：parent.removeChild(child);parent是div1，child是一个pchild.parentNode.removeChild(child);利用parentNode属性找到父，再删子改：parent.replaceChild(para, child);查：document.getElementById()节点列表 var myNodeList = document.querySelectorAll(“p”);通过querySelectorAll() chileNodes得到节点列表情况for (i = 0; i &lt; myNodelist.length; i++) {myNodelist[i].style.backgroundColor = “red”;}改变所有p节点颜色 （六）BOMBrowser Object Model浏览器对象模型：允许js与浏览器对话获取浏览器宽和高，适用所有浏览器var w = window.innerWidth|| document.documentElement.clientWidth|| document.body.clientWidth; var h = window.innerHeight|| document.documentElement.clientHeight|| document.body.clientHeight;","categories":[{"name":"web前端","slug":"web前端","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"web前端/JavaScript","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://hezhaoxiang.work/tags/JavaScript/"}],"author":"He Zhaoxiang"},{"title":"web前端--JavaScript（二）基础知识","slug":"web前端-JavaScript（二）基础知识","date":"2019-10-20T13:34:00.000Z","updated":"2019-12-10T07:11:26.000Z","comments":true,"path":"2019/learnjs02/","link":"","permalink":"https://hezhaoxiang.work/2019/learnjs02/","excerpt":"","text":"内容来源：https://www.w3school.com.cn/js/index.aspw3cshool是官方教程，看起来比较清楚，视频大多时间太冗长。以下内容多摘自w3cshool。 一、js整体学习路线1、基础知识，数据类型等2、js对象3、函数4、DOM全部内容5、BOM-js window 二、基础知识1、显示：window.alert(“”)document.write(“”)innerHTML(),document.getElementById(id).innerHTML=2的10次幂 2**102、js中只有一种数值类型，即2=2.000.001=1e-3js数据类型中的对象{}3、typeof 确定变量类型，null数据类型是对象，undefine类型就是undefine！=null 4、调用function更方便，可以直接在变量中调用注：在function中定义的变量在函数外不能使用 5、对象也可以有方法，方法即function函数，方法是属性值6、字符串方法、a=num.lengthb=num.indexOf(“x”)x在num第一次出现的位置,search()也是返回第一次位置search() 方法无法设置第二个开始位置参数。indexOf() 方法无法设置更强大的搜索值（正则表达式）str.slice(3,6)提取3_6位置toUpperCase，toLowercase转换为大小写字符concat（）连接字符串，+效果一样7、数字方法toString（）转换为字符串8、数组 array=[1,3,5] array.posh(“zimu”) array.posh(7)push() 方法;//向数组添加新元素的最佳方法是使用fruits.pop();// 从 fruits 删除最后一个元素join() 方法也可将所有数组元素结合为一个字符串sort() 方法以字母顺序对数组进行排序reverse() 方法反转数组中的元素forEach() 方法为每个数组元素调用一次函数numbers.forEach(myFunction);map:创建新数组numbers2 = numbers1.map(myFunction);9、时间 d = new Date(); 1&lt;!DOCTYPE html&gt;2&lt;html lang&#x3D;&quot;en&quot;&gt;3&lt;head&gt;4 &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;5 &lt;title&gt;Title&lt;&#x2F;title&gt;6&lt;&#x2F;head&gt;7&lt;body&gt;8&lt;p id&#x3D;&quot;demo&quot;&gt;text&lt;&#x2F;p&gt;910&lt;button type&#x3D;&quot;button&quot; onclick&#x3D;&quot;myfunction()&quot;&gt;点击&lt;&#x2F;button&gt;1112&lt;script&gt;13 function myfunction() &#123;14 var jubu&#x3D;2;15 document.getElementById(&quot;demo&quot;).innerHTML &#x3D; &quot;text被更改&quot;;16 &#125;17 var jubu&#x3D;2;18 document.write(jubu+2);19 var jubu2&#x3D;3;20 document.write(&quot;jubu2&quot;);21 var person&#x3D;&#123;name:&quot;404&quot;,age: &quot;25&quot;&#125;;22 &#x2F;&#x2F; 2 创建person对象，该对象包括name和age两个属性，属性值分别是404和25，注意引号和逗号23 var dog&#x3D; &#123;age:&quot;2&quot;,24 do:function wangwang() &#123;25 return this.age;26 &#x2F;&#x2F; 5 这里的this是指dog对象，这个对象可以有age和do属性27 &#125;28 &#125;;2930&lt;&#x2F;script&gt;3132&lt;&#x2F;body&gt;33&lt;&#x2F;html&gt; 注：方法函数很多，不必每个都记，要用时查w3cshool手册即可。","categories":[{"name":"web前端","slug":"web前端","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"web前端/JavaScript","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://hezhaoxiang.work/tags/JavaScript/"}],"author":"He Zhaoxiang"},{"title":"web前端--JavaScript（一）入门","slug":"web前端-JavaScript（一）入门","date":"2019-10-10T13:54:00.000Z","updated":"2019-12-11T01:43:46.000Z","comments":true,"path":"2019/learnjs01/","link":"","permalink":"https://hezhaoxiang.work/2019/learnjs01/","excerpt":"","text":"内容来源：https://www.w3school.com.cn/js/index.aspw3cshool是官方教程，看起来比较清楚，视频大多时间太冗长。以下内容多摘自w3cshool。 一、js整体学习路线1、基础知识，数据类型等2、js对象3、函数4、DOM全部内容5、BOM-js window 二、基础知识1、显示：window.alert(“”)document.write(“”)innerHTML(),document.getElementById(id).innerHTML=2的10次幂 2**102、js中只有一种数值类型，即2=2.000.001=1e-3js数据类型中的对象{}3、typeof 确定变量类型，null数据类型是对象，undefine类型就是undefine！=null 4、调用function更方便，可以直接在变量中调用注：在function中定义的变量在函数外不能使用 5、对象也可以有方法，方法即function函数，方法是属性值6、字符串方法、a=num.lengthb=num.indexOf(“x”)x在num第一次出现的位置,search()也是返回第一次位置search() 方法无法设置第二个开始位置参数。indexOf() 方法无法设置更强大的搜索值（正则表达式）str.slice(3,6)提取3_6位置toUpperCase，toLowercase转换为大小写字符concat（）连接字符串，+效果一样7、数字方法toString（）转换为字符串8、数组 array=[1,3,5] array.posh(“zimu”) array.posh(7)push() 方法;//向数组添加新元素的最佳方法是使用fruits.pop();// 从 fruits 删除最后一个元素join() 方法也可将所有数组元素结合为一个字符串sort() 方法以字母顺序对数组进行排序reverse() 方法反转数组中的元素forEach() 方法为每个数组元素调用一次函数numbers.forEach(myFunction);map:创建新数组numbers2 = numbers1.map(myFunction);9、时间 d = new Date(); 1&lt;!DOCTYPE html&gt;2&lt;html lang&#x3D;&quot;en&quot;&gt;3&lt;head&gt;4 &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;5 &lt;title&gt;Title&lt;&#x2F;title&gt;6&lt;&#x2F;head&gt;7&lt;body&gt;8&lt;p id&#x3D;&quot;demo&quot;&gt;text&lt;&#x2F;p&gt;910&lt;button type&#x3D;&quot;button&quot; onclick&#x3D;&quot;myfunction()&quot;&gt;点击&lt;&#x2F;button&gt;1112&lt;script&gt;13 function myfunction() &#123;14 var jubu&#x3D;2;15 document.getElementById(&quot;demo&quot;).innerHTML &#x3D; &quot;text被更改&quot;;16 &#125;17 var jubu&#x3D;2;18 document.write(jubu+2);19 var jubu2&#x3D;3;20 document.write(&quot;jubu2&quot;);21 var person&#x3D;&#123;name:&quot;404&quot;,age: &quot;25&quot;&#125;;22 &#x2F;&#x2F; 2 创建person对象，该对象包括name和age两个属性，属性值分别是404和25，注意引号和逗号23 var dog&#x3D; &#123;age:&quot;2&quot;,24 do:function wangwang() &#123;25 return this.age;26 &#x2F;&#x2F; 5 这里的this是指dog对象，这个对象可以有age和do属性27 &#125;28 &#125;;2930&lt;&#x2F;script&gt;3132&lt;&#x2F;body&gt;33&lt;&#x2F;html&gt; 注：方法函数很多，不必每个都记，要用时查w3cshool手册即可。","categories":[{"name":"web前端","slug":"web前端","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"web前端/JavaScript","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://hezhaoxiang.work/tags/JavaScript/"}],"author":"He Zhaoxiang"},{"title":"web前端--CSS","slug":"web前端--CSS","date":"2019-10-08T11:56:18.000Z","updated":"2019-12-09T14:03:42.000Z","comments":true,"path":"2019/2019100819/","link":"","permalink":"https://hezhaoxiang.work/2019/2019100819/","excerpt":"","text":"前端时间学了些HTML的基本内容，现在开始学CSS，CSS之后才是真的开始前端，Javascript，jquery等等。。入题 一、CSS基本了解CSS层叠样式表(Cascading Style Sheets)是用来表现html或者xml的一种语言，可以简单理解为CSS是用来修饰html网页的一种语言。 二、应用添加到html中，来修饰网页，以下是三种样式表。1、元素样式表2、文档样式表3、外部样式表（常用，将html和css样式分离，结构清晰） 1&lt;!DOCTYPE html&gt;2&lt;html lang&#x3D;&quot;en&quot;&gt;3&lt;head&gt;4 &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;5 &lt;title&gt;CSS样式表&lt;&#x2F;title&gt;6 &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;color.css&quot;&gt;7&lt;!-- link链接到外部样式表，采用color.css,对应word3--&gt;8 &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;9 .class2:hover&#123;10 font-size:30px;color: #ff2539;11 &#x2F;*设置文档内嵌样式表，所有word标签都将这个格式50，红色*&#x2F;12 &#125;13 &lt;&#x2F;style&gt;14&lt;&#x2F;head&gt;15&lt;body&gt;16&lt;p class&#x3D;&quot;class1&quot; style&#x3D;&quot;font-size: 20px;color: #2066ff&quot;&gt;元素内嵌样式表&lt;&#x2F;p&gt;&lt;br&gt;17&lt;p class&#x3D;&quot;class2&quot;&gt;文档内嵌样式表&lt;&#x2F;p&gt;&lt;br&gt;18&lt;p class&#x3D;&quot;class3&quot;&gt;外部CSS样式表&lt;&#x2F;p&gt;&lt;br&gt;19&lt;!--若都设为word，则出现层叠效果，优先级：元素&gt;文档&gt;外部--&gt;20&lt;!--动作选择器hover：鼠标移到此处字体变大显色--&gt;21&lt;&#x2F;body&gt;22&lt;&#x2F;html&gt; word3中的外部样式表，需要在project中新建一个color.css文件，内容如下： 1.class3&#123;2 font-size:40px;3 color: #f123ff;4&#125; 三、选择样式（1）选择所有元素：*（2）根据类设置属性：.class1{}（3）根据id： #id1{}（4）根据属性选择元素：【href=href1】{}（5）:冒号选择器 1&lt;!DOCTYPE html&gt;2&lt;html lang&#x3D;&quot;en&quot;&gt;3&lt;head&gt;4 &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;5 &lt;title&gt;样式&lt;&#x2F;title&gt;6 &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;7 *&#123;&#x2F;*设置所有样式都一样用**&#x2F;8 font-size: 30px;9 color: #ff2539;10 &#125;11 [href&#x3D;&quot;02CSS选择样式.html&quot;]&#123;&#125;12 a:hover&#123;&#x2F;*鼠标经过时变化*&#x2F;13 font-size: 30px;14 color: #dbff08;15 &#125;16 &lt;&#x2F;style&gt;17&lt;&#x2F;head&gt;18&lt;body&gt;19&lt;a class&#x3D;&quot;class1&quot;&gt;文本&lt;&#x2F;a&gt;20&lt;a href&#x3D;&quot;02CSS选择样式.html&quot;&gt;文本2&lt;&#x2F;a&gt;21&lt;a class&#x3D;&quot;class1&quot;&gt; 文本&lt;&#x2F;a&gt;22&lt;p&gt;文本3&lt;&#x2F;p&gt;23&lt;h1&gt;一级标题&lt;&#x2F;h1&gt;24&lt;&#x2F;body&gt;25&lt;&#x2F;html&gt; 四、控制边框和背景1&lt;!DOCTYPE html&gt;2&lt;html lang&#x3D;&quot;en&quot;&gt;3&lt;head&gt;4 &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;5 &lt;title&gt;样式&lt;&#x2F;title&gt;6 &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;7 *&#123;&#x2F;*设置所有样式都一样用**&#x2F;8 font-size: 30px;9 color: #ff2539;10 &#125;11 [href&#x3D;&quot;02CSS选择样式.html&quot;]&#123;&#125;12 a:hover&#123;&#x2F;*鼠标经过时变化*&#x2F;13 font-size: 30px;14 color: #dbff08;15 &#125;16 &lt;&#x2F;style&gt;17&lt;&#x2F;head&gt;18&lt;body&gt;19&lt;a class&#x3D;&quot;class1&quot;&gt;文本&lt;&#x2F;a&gt;20&lt;a href&#x3D;&quot;02CSS选择样式.html&quot;&gt;文本2&lt;&#x2F;a&gt;21&lt;a class&#x3D;&quot;class1&quot;&gt; 文本&lt;&#x2F;a&gt;22&lt;p&gt;文本3&lt;&#x2F;p&gt;23&lt;h1&gt;一级标题&lt;&#x2F;h1&gt;24&lt;&#x2F;body&gt;25&lt;&#x2F;html&gt; 五、文本样式1、对齐文本 text-align:center2、文本方向 direction:ltr从左到右,rtl右左3、字符间距 letter-spacing:10px4、首行缩进 text-indent5、文本装饰 text-decoration:underline下划线, line-through删除线6、文本大小写转换 text-transform:capitalize， lowercase小写, upercase大写 1&lt;!DOCTYPE html&gt;2&lt;html lang&#x3D;&quot;en&quot;&gt;3&lt;head&gt;4 &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;5 &lt;title&gt;文本样式上&lt;&#x2F;title&gt;67&lt;&#x2F;head&gt;8&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;9 .class3&#123;10 text-align:center;11 direction: rtl;12 letter-spacing:10px;&#x2F;*字母或字间距*&#x2F;13 word-spacing: 3px;&#x2F;*单词间距*&#x2F;14 text-indent: 20px;15 text-decoration: line-through;16 text-transform: capitalize;首字母自动大写17 &#125;18&lt;&#x2F;style&gt;19&lt;body&gt;20&lt;p class&#x3D;&quot;class3&quot;&gt;文本123456789&lt;&#x2F;p&gt;21&lt;&#x2F;body&gt;22&lt;&#x2F;html&gt; 六、过渡、动画所谓过渡即渐变效果，动画类似，注释部分为过渡。hover为动画hover效果：鼠标放到此处，出现动画。 1&lt;!DOCTYPE html&gt;2&lt;html lang&#x3D;&quot;en&quot;&gt;3&lt;head&gt;4 &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;5 &lt;title&gt;CSS过渡&amp;动画&lt;&#x2F;title&gt;6 &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;7 p&#123;8 width: 100px;9 height: 200px;10 background-color: aqua;11 &#125;12 &#x2F;*p:hover&#123;*&#x2F;13 &#x2F;* width:200px;*&#x2F;14 &#x2F;* height: 300px;*&#x2F;15 &#x2F;* background-color: #2066ff;*&#x2F;16 &#x2F;* transition-delay: 200ms;*&#x2F;17 &#x2F;* transition-duration: 500ms;!*渐变时间*!*&#x2F;18 &#x2F;* !*transition-property: background-color;!*颜色渐变，其他立刻*!*!*&#x2F;19 &#x2F;* transition-timing-function: linear;*&#x2F;20 &#x2F;* !*linear变化速度线性；ease：慢快慢；ease-in：下凹慢快；ease-out上凸快慢；ease-in-out慢快慢，效果更明显*!*&#x2F;21 &#x2F;*整体效果：100*200--》200*300，颜色变化，有渐变效果*&#x2F;22 &#x2F;*&#125;*&#x2F;23 p:hover&#123;24 animation-duration: 500ms;25 animation-delay: 200ms;26 animation-name: dongHua;27 animation-iteration-count: infinite;&#x2F;*循环播放*&#x2F;28 animation-iteration-count: 3;&#x2F;*播放3次*&#x2F;29 animation-direction: alternate;&#x2F;*以反方向运行大小大小效果*&#x2F;303132 &#125;33 @keyframes dongHua &#123;34 from&#123;35 width: 100px;36 height:100px;37 background-color: #ff2687;38 &#125;39 50%&#123;&#125;40 75%&#123;&#125;41 to&#123;42 width: 200px;43 height:200px;44 background-color: #ff2539;45 &#125;4647 &#125;48&lt;&#x2F;style&gt;49&lt;&#x2F;head&gt;50&lt;body&gt;51&lt;p&gt;&lt;&#x2F;p&gt;52&lt;&#x2F;body&gt;53&lt;&#x2F;html&gt; 七、盒子模型盒子模型是css样式中最常用的一种模型，简单来说是用来排版页面上的结构，样式。只是用html+CSS切图的话，肯定少不了用盒子模型。盒子模型中有以下几个常用的属性：content 内容padding 内边距border 边框margin 外边距，距离页面边界的距离div 常用标签，用来排版，设计结构，无其他作用这是盒子模型的标准结构，以下给一个简单示例。 1```css2&lt;!DOCTYPE html&gt;3&lt;html lang=\"en\"&gt;4&lt;head&gt;5 &lt;meta charset=\"UTF-8\"&gt;6 &lt;title&gt;盒子&lt;/title&gt;7 &lt;style type=\"text/css\"&gt;8 .class1&#123;9 border: 1px solid rebeccapurple;10 background-color: aqua;11 /*padding-top: 20px;*/12 /*padding-bottom: 20px;*/13 padding: 20px 10px;/*上下20，左右10（top，bottom，left，right）*/14 /*margin: 500px;*/15 background-clip: content-box;/*只在文本处加背景颜色*/16 &#125;17 &lt;/style&gt;18&lt;/head&gt;19&lt;body&gt;20&lt;div class=\"class1\"&gt;文本&lt;/div&gt;21&lt;/body&gt;22&lt;/html&gt;","categories":[{"name":"web前端","slug":"web前端","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"HTML&CSS","slug":"web前端/HTML-CSS","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/HTML-CSS/"}],"tags":[{"name":"HTML&CSS","slug":"HTML-CSS","permalink":"https://hezhaoxiang.work/tags/HTML-CSS/"}]},{"title":"web前端--HTML入门学习（三）","slug":"web前端--HTML入门学习（三）","date":"2019-09-18T11:23:32.000Z","updated":"2019-12-10T07:37:24.000Z","comments":true,"path":"2019/learn-html03/","link":"","permalink":"https://hezhaoxiang.work/2019/learn-html03/","excerpt":"","text":"摘要：HTML的学习就暂告一段落，入门了解为主，建议学习时间1~2天。本次主要内容播放视频，将视频加入到HTML所在文件夹下，简单设置即可。 播放视频相关设置1&lt;!DOCTYPE html&gt;2&lt;html lang&#x3D;&quot;en&quot;&gt;3&lt;head&gt;4 &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;5 &lt;title&gt;播放视频&lt;&#x2F;title&gt;6&lt;&#x2F;head&gt;7&lt;body&gt;8&lt;video src&#x3D;&quot;11video.mp4&quot; height&#x3D;&quot;200px&quot; controls preload&#x3D;&quot;metadata&quot; loop9poster&#x3D;&quot;封面.png&quot;&gt;&lt;&#x2F;video&gt;10&lt;!--preload预先载入：auto,metadata,none(默认为none）--&gt;11&lt;!--controls包含播放，音量，全屏等按钮--&gt;12&lt;!--loop播放完自动循环--&gt;13&lt;!--poster封面--&gt;14&lt;&#x2F;body&gt;15&lt;&#x2F;html&gt; 运行结果：","categories":[{"name":"web前端","slug":"web前端","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"HTML&CSS","slug":"web前端/HTML-CSS","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/HTML-CSS/"}],"tags":[{"name":"HTML&CSS","slug":"HTML-CSS","permalink":"https://hezhaoxiang.work/tags/HTML-CSS/"}]},{"title":"web前端--HTML入门学习（二）","slug":"web前端--HTML入门学习（二）","date":"2019-09-17T07:01:06.000Z","updated":"2019-12-10T11:45:20.000Z","comments":true,"path":"2019/learn-html02/","link":"","permalink":"https://hezhaoxiang.work/2019/learn-html02/","excerpt":"","text":"本次内容：表单，加载图片等 一、表单包括三种按钮的区别，单选按钮，下拉列表及提交按钮。 1&lt;!DOCTYPE html&gt;2&lt;html lang&#x3D;&quot;en&quot;&gt;3&lt;head&gt;4 &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;5 &lt;title&gt;Title&lt;&#x2F;title&gt;6&lt;&#x2F;head&gt;7&lt;body&gt;8&lt;form&gt;9 &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮&quot;&gt;普通按钮&lt;br&gt;10 &lt;button&gt;按钮&lt;&#x2F;button&gt; 与js合作绑定事件&lt;br&gt;11 &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;按钮&quot;&gt; 用于提交表单&lt;br&gt;12 &lt;input type&#x3D;&quot;range&quot; min&#x3D;&quot;20&quot; max&#x3D;&quot;60&quot; step&#x3D;&quot;2&quot; value&#x3D;&quot;30&quot;&gt;&lt;br&gt;步长和初始值13 &lt;input type&#x3D;&quot;number&quot; min&#x3D;&quot;-15&quot; max&#x3D;&quot;100&quot; value&#x3D;&quot;0&quot;&gt;&lt;br&gt;14 &lt;input type&#x3D;&quot;radio&quot; value&#x3D;&quot;vivo&quot; name&#x3D;&quot;a&quot;&gt;15 &lt;input type&#x3D;&quot;radio&quot; value&#x3D;&quot;oppo&quot; name&#x3D;&quot;a&quot; checked&gt;oppo16 &lt;input type&#x3D;&quot;radio&quot; value&#x3D;&quot;mi&quot; name&#x3D;&quot;a&quot;&gt;mi&lt;br&gt;17 &lt;select name&#x3D;&quot;phone&quot;&gt;18 &lt;option value&#x3D;&quot;vivo&quot;&gt;vivo&lt;&#x2F;option&gt;19 &lt;option value&#x3D;&quot;huawei&quot; selected&gt;huawei&lt;&#x2F;option&gt; &lt;!--预选--&gt;20 &lt;option value&#x3D;&quot;mi&quot;&gt;xiaomi&lt;&#x2F;option&gt;21 &lt;&#x2F;select&gt;22 &lt;input list&#x3D;&quot;phones&quot; name&#x3D;&quot;phone&quot;&gt;23 &lt;datalist id&#x3D;&quot;phones&quot;&gt;24 &lt;option value&#x3D;&quot;vivo&quot;&gt;vivo&lt;&#x2F;option&gt;25 &lt;option value&#x3D;&quot;huawei&quot;&gt;huawei&lt;&#x2F;option&gt;26 &lt;option value&#x3D;&quot;mi&quot;&gt;xiaomi&lt;&#x2F;option&gt;27 &lt;&#x2F;datalist&gt;28 &lt;input type&#x3D;&quot;submit&quot;&gt;29&lt;&#x2F;form&gt;30&lt;&#x2F;body&gt;31&lt;&#x2F;html&gt; 运行结果： 二、表单（续）包括：邮件，日期，颜色，上传文件 1&lt;!DOCTYPE html&gt;2&lt;html lang&#x3D;&quot;en&quot;&gt;3&lt;head&gt;4 &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;5 &lt;title&gt;09biaodan&lt;&#x2F;title&gt;6&lt;body&gt;7&lt;form&gt;8 &lt;input type&#x3D;&quot;email&quot;&gt;&lt;!-- 能正确识别邮箱，格式不对要重新输入--&gt;9 &lt;input type&#x3D;&quot;tel&quot;&gt;10 &lt;input type&#x3D;&quot;date&quot;&gt;&lt;!--在谷歌浏览器中有展示框，IE火狐等无框--&gt;11 &lt;input type&#x3D;&quot;color&quot;&gt;12 &lt;input type&#x3D;&quot;hidden&quot; value&#x3D;&quot;hzx&quot; name&#x3D;&quot;hzxz&quot;&gt;13&lt;!-- 在浏览器中不展示，但是仍然存在，作用类似密码--&gt;14 &lt;input type&#x3D;&quot;image&quot; src&#x3D;&quot;404.png&quot; width&#x3D;&quot;100px&quot;&gt;15 &lt;input type&#x3D;&quot;file&quot; multiple&gt;&lt;!-- 或者Required单个文件--&gt;16 &lt;input type&#x3D;&quot;url&quot;&gt;1718&lt;&#x2F;form&gt;1920&lt;&#x2F;body&gt;21&lt;&#x2F;head&gt;22&lt;&#x2F;html&gt; 运行结果： 三、添加图片点击图片跳转 1&lt;!DOCTYPE html&gt;2&lt;html lang&#x3D;&quot;en&quot;&gt;3&lt;head&gt;4 &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;5 &lt;title&gt;图片image&lt;&#x2F;title&gt;6&lt;&#x2F;head&gt;7&lt;body&gt;8&lt;a href&#x3D;&quot;04初步.html&quot; target&#x3D;&quot;_blank&quot;&gt;9&lt;img src&#x3D;&quot;404.png&quot; width&#x3D;&quot;256px&quot; height&#x3D;&quot;128px&quot; alt&#x3D;&quot;找不到&quot;&gt;&lt;br&gt;10&lt;!--当图片不存在时展示alt的内容--&gt;11&lt;&#x2F;a&gt;12&lt;img src&#x3D;&quot;10img.png&quot; usemap&#x3D;&quot;#map1&quot;&gt;13&lt;!----&gt;14&lt;map name&#x3D;&quot;map1&quot;&gt;15 &lt;area href&#x3D;&quot;Rili.html&quot; shape&#x3D;&quot;rect&quot; coords&#x3D;&quot;6,11,103,108&quot; target&#x3D;&quot;_blank&quot;&gt;16&lt;!-- 图片中的位置，矩形（左x，上y，右x，下y）--&gt;17 &lt;area href&#x3D;&quot;00.html&quot; shape&#x3D;&quot;circle&quot; &gt;18&lt;&#x2F;map&gt;19&lt;&#x2F;body&gt;20&lt;&#x2F;html&gt;","categories":[{"name":"web前端","slug":"web前端","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"HTML&CSS","slug":"web前端/HTML-CSS","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/HTML-CSS/"}],"tags":[{"name":"HTML&CSS","slug":"HTML-CSS","permalink":"https://hezhaoxiang.work/tags/HTML-CSS/"}]},{"title":"web前端--HTML入门学习（一）","slug":"web前端--HTML入门学习（一）","date":"2019-09-10T11:23:32.000Z","updated":"2019-12-10T11:44:30.000Z","comments":true,"path":"2019/learn-html01/","link":"","permalink":"https://hezhaoxiang.work/2019/learn-html01/","excerpt":"","text":"HTML入门学习 前言推荐使用IDEA，webstorm等编辑器，运行时在谷歌浏览器中打开推荐学习视频：https://www.bilibili.com/video/av5862916 一、了解html结构1&lt;!DOCTYPE html&gt;2&lt;html lang&#x3D;&quot;en&quot;&gt;3&lt;head&gt;4 &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;&lt;!-- 编码方式--&gt;5 &lt;title&gt; biaoti &lt;&#x2F;title&gt;&lt;!--head中必须有title，标题--&gt;6&lt;&#x2F;head&gt;7&lt;body&gt;8&lt;h1&gt;标题元素&lt;&#x2F;h1&gt;9body内容10&lt;&#x2F;body&gt;11&lt;&#x2F;html&gt; 运行结果： 二、插入超链接，改变字体等1&lt;!--&lt;!DOCTYPE html&gt;--&gt;2&lt;html lang&#x3D;&quot;en&quot;&gt;3&lt;head&gt;4 &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;5 &lt;title&gt;table&lt;&#x2F;title&gt;6&lt;&#x2F;head&gt;7&lt;body&gt;8title9&lt;!--超链接 --&gt;10&lt;a href&#x3D;&quot;01.html&quot; target&#x3D;&quot;_blank&quot;&gt;1&lt;&#x2F;a&gt;11&lt;!--保留原有页面，跳到新页面--&gt;12&lt;a href&#x3D;&quot;01.html&quot;&gt;2&lt;&#x2F;a&gt;13&lt;!--直接跳到新页面，原有页面消失--&gt;14&lt;a href&#x3D;&quot;01.html&quot; target&#x3D;&quot;_self&quot;&gt;3&lt;&#x2F;a&gt;15&lt;em&gt;斜体&lt;&#x2F;em&gt;&lt;u&gt;下划线&lt;&#x2F;u&gt;&lt;s&gt;划去效果&lt;&#x2F;s&gt;&lt;b&gt;加黑效果&lt;&#x2F;b&gt;16&lt;!--&lt;img src&#x3D;&quot;&#x2F;404.png&quot; width&#x3D;&quot;412&quot; height&#x3D;&quot;235&quot; &#x2F;&gt;--&gt;17&lt;&#x2F;body&gt;18&lt;&#x2F;html&gt; 运行： 三、表格（行，列，合并，表头，表内容，表脚）1&lt;!DOCTYPE html&gt;2&lt;html lang&#x3D;&quot;en&quot;&gt;3&lt;head&gt;4 &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;5 &lt;title&gt;table&lt;&#x2F;title&gt;6&lt;&#x2F;head&gt;7&lt;body&gt;8&lt;table border&#x3D;&quot;5px&quot; align&#x3D;&quot;center&quot;&gt;9&lt;!-- 边框，表格居中--&gt;10 &lt;!-- thead，tbody，tfoot，表头，表内容，表脚--&gt;11 &lt;thead&gt;12 &lt;tr&gt;13 &lt;th&gt;姓名&lt;&#x2F;th&gt;14 &lt;th&gt;性别&lt;&#x2F;th&gt;15 &lt;th&gt;年龄&lt;&#x2F;th&gt;16 &lt;&#x2F;tr&gt;17 &lt;&#x2F;thead&gt;18 &lt;tbody&gt;19 &lt;tr&gt;20 &lt;td rowspan&#x3D;&quot;2&quot;&gt;Bob&lt;&#x2F;td&gt;21 &lt;td&gt;man&lt;&#x2F;td&gt;22 &lt;td&gt;23&lt;&#x2F;td&gt;23 &lt;&#x2F;tr&gt;24 &lt;tr&gt;25&lt;!-- &lt;td&gt;Jerry&lt;&#x2F;td&gt;--&gt;26 &lt;td colspan&#x3D;&quot;2&quot;&gt;未知&lt;&#x2F;td&gt;27 &lt;&#x2F;tr&gt;28 &lt;&#x2F;tbody&gt;29 &lt;tfoot&gt;30 &lt;tr&gt;31 &lt;th&gt;总计&lt;&#x2F;th&gt;32 &lt;th colspan&#x3D;&quot;2&quot;&gt;2&lt;&#x2F;th&gt;33&lt;!-- &lt;th&gt;43&lt;&#x2F;th&gt;--&gt;34 &lt;&#x2F;tr&gt;35 &lt;&#x2F;tfoot&gt;3637&lt;&#x2F;table&gt;38&lt;&#x2F;body&gt;39&lt;&#x2F;html&gt; 运行： 四、表单（文字框的几种形式）1&lt;!DOCTYPE html&gt;2&lt;html lang&#x3D;&quot;en&quot;&gt;3&lt;head&gt;4 &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;5 &lt;title&gt;7表单shang&lt;&#x2F;title&gt;6&lt;&#x2F;head&gt;7&lt;body&gt;8&lt;form&gt;9 &lt;input type&#x3D;&quot;text&quot; size&#x3D;&quot;50&quot;&gt;&lt;br&gt;&lt;!--文本框长度50--&gt;10 &lt;input type&#x3D;&quot;text&quot; value&#x3D;&quot;占位符，可修改&quot;&gt;&lt;br&gt;11 &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;不占位置&quot;&gt;&lt;br&gt;12 &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;最多输入5位&quot; maxlength&#x3D;&quot;5&quot;&gt;&lt;br&gt;13&lt;&#x2F;form&gt;14&lt;&#x2F;body&gt;15&lt;&#x2F;html&gt;","categories":[{"name":"web前端","slug":"web前端","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/"},{"name":"HTML&CSS","slug":"web前端/HTML-CSS","permalink":"https://hezhaoxiang.work/categories/web%E5%89%8D%E7%AB%AF/HTML-CSS/"}],"tags":[{"name":"HTML&CSS","slug":"HTML-CSS","permalink":"https://hezhaoxiang.work/tags/HTML-CSS/"}]}]}